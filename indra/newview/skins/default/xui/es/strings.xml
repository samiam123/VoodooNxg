<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<!-- This file contains strings that used to be hardcoded in the source.
     It is only for those strings which don't belong in a floater.
     For example, the strings used in avatar chat bubbles, and strings
     that are returned from one component and may appear in many places-->
<strings>
	
	<string name="CURRENCY">L$</string>
	<string name="GRID_OWNER">Linden Lab</string>
	
	<string name="hippo_label_free">free</string>
	<string name="hippo_label_week">semana</string>
	<string name="TeleportOfferMaturity">
		[NAME] te ofrece un TP a [DESTINATION]
	</string>
	<string name="TeleportLureMaturity">
		[NAME] te ofrece una invitación de teleporte a [DESTINATION]
	</string>
	<string name="AvatarIdle">
		Inactivo por [MINUTES] min
	</string>
	
	<!-- Default Args - these arguments will be replaced in all strings -->
	<string name="SECOND_LIFE">Second Life</string>
	<string name="APP_NAME">Singularity Viewer</string>
	<string name="CAPITALIZED_APP_NAME">SINGULARITY VIEWER</string>
	<string name="SECOND_LIFE_GRID">Grid Second Life</string>
	<string name="SUPPORT_SITE">Portal de Soporte de Second Life</string>
	
	<!-- starting up -->
	<string name="StartupDetectingHardware">Detectando hardware...</string>
	<string name="StartupLoading">Cargando [APP_NAME]...</string>
	<string name="StartupClearingCache">Limpiando caché...</string>
	<string name="StartupInitializingTextureCache">Inicializando Caché de Texturas...</string>
	<string name="StartupInitializingVFS">Inicializando VFS...</string>
	<string name="StartupRequireDriverUpdate">¡Ha fallado la inicialización gráfica. Por favor, actualiza los controladores gráficos!</string>
	
	<!--  progress -->
	<string name="ProgressRestoring">Restaurando...</string>
	<string name="ProgressChangingResolution">Cambiando la Resolución...</string>
	
	<!-- Login -->
	<string name="LoginInProgress">Iniciando sesión. [APP_NAME] puede aparecer congelado.  Espera por favor.</string>
	<string name="LoginInProgressNoFrozen">Iniciando sesión...</string>
	<string name="LoginAuthenticating">Autenticando</string>
	<string name="LoginMaintenance">Realizando mantenimiento de cuentas...</string>
	<string name="LoginAttempt">Ha fallado el inicio de sesión previo. Iniciando sesión, intento [NUMBER]</string>
	<string name="LoginPrecaching">Cargando el Mundo...</string>
	<string name="LoginInitializingBrowser">iniciando navegador web incorporado...</string>
	<string name="LoginInitializingMultimedia">Inicializando multimedia...</string>
	<string name="LoginInitializingFonts">Cargando fuentes...</string>
	<string name="LoginVerifyingCache">Verificando archivos de caché (puede demorar entre 60-90 segundos)...</string>
	<string name="LoginProcessingResponse">Procesando Respuesta...</string>
	<string name="LoginInitializingWorld">Inicializando el Mundo...</string>
	<string name="LoginDecodingImages">Decodificando Imágenes...</string>
	<string name="LoginInitializingQuicktime">Inicializando QuickTime...</string>
	<string name="LoginQuicktimeNotFound">No se ha encontrado QuickTime - incapaz de iniciarlo.</string>
	<string name="LoginQuicktimeOK">QuickTime ha sido inicializado satisfactoriamente.</string>
	<string name="LoginRequestSeedCapGrant">Solicitando capacidades de la Región...</string>
	<string name="LoginRetrySeedCapGrant">Solicitando capacidades de la Región, intento [NUMBER]...</string>
	<string name="LoginWaitingForRegionHandshake">Esperando saludo de la Región...</string>
	<string name="LoginConnectingToRegion">Conectando a la región...</string>
	<string name="LoginDownloadingClothing">Descargando ropas...</string>
	<string name="LoginFailed">Inicio de sesión fallido.</string>
	<string name="Quit">Salir</string>
	
	<!-- Disconnection -->
	<string name="AgentLostConnection">Esta región está experimentando problemas.  Revisa por favor tu conexión a Internet.</string>
	<string name="SavingSettings">Guardando tus configuraciones...</string>
	<string name="LoggingOut">Cerrando sesión...</string>
	<string name="ShuttingDown">Cerrando...</string>
	<string name="YouHaveBeenDisconnected">Has sido desconectado de la región donde te encontrabas.</string>
	<string name="SentToInvalidRegion">Se te ha enviado a una región no válida.</string>
	
	<!-- Tooltip, llhoverview.cpp -->
	<string name="TooltipPerson">Persona</string><!-- Object under mouse pointer is an avatar -->
	<string name="TooltipNoName">(sin nombre)</string> <!-- No name on an object -->
	<string name="TooltipOwner">Propietario:</string> <!-- Owner name follows -->
	<string name="TooltipPublic">Público</string> <!-- Public permissions on an object -->
	<string name="TooltipIsGroup">(Grupo)</string> <!-- The name before this text is that of a group -->
	<string name="TooltipFlagScript">Script</string>
	<string name="TooltipFlagPhysics">Material</string>
	<string name="TooltipFlagTouch">Tocar</string>
	<string name="TooltipFlagL$">[CURRENCY]</string>
	<string name="TooltipFlagDropInventory">Soltar Inventario</string>
	<string name="TooltipFlagPhantom">Fantasma</string>
	<string name="TooltipFlagTemporary">Temporario</string>
	<string name="TooltipFlagRightClickMenu">(Botón derecho para menú)</string>
	<string name="TooltipFreeToCopy">Libre para copiar</string>
	<string name="TooltipForSaleL$">En venta: [CURRENCY][AMOUNT]</string> <!-- L$ version -->
	<string name="TooltipForSaleMsg">En venta: [MESSAGE]</string> <!-- Message (RetrievingData) -->
	<string name="TooltipFlagGroupBuild">Construir Grupo</string>
	<string name="TooltipFlagNoBuild">No Construir</string>
	<string name="TooltipFlagNoEdit">Construir Grupo</string>
	<string name="TooltipFlagNotSafe">No seguro</string><!-- damage area -->
	<string name="TooltipFlagNoFly">No volar</string>
	<string name="TooltipFlagGroupScripts">Scripts de Grupo</string>
	<string name="TooltipFlagNoScripts">Sin Scripts</string>
	<string name="TooltipLand">Terreno:</string>
	<string name="TooltipMustSingleDrop">Sólo un único item puede ser arrastrado aquí</string>
	<string name="TooltipOutboxDragToWorld">No puedes rezear ítems en tu Merchant Outbox</string>
	<string name="TooltipOutboxNoTransfer">Uno o más de estos objetos no pueden ser vendidos o transferidos.</string>
	<string name="TooltipOutboxNotInInventory">Tu Merchant Outbox solo puede aceptar ítems de tu inventario</string>
	<string name="TooltipOutboxWorn">No puedes colocar ítems que tienes vestidos en tu Merchant Outbox</string>
	<string name="TooltipOutboxCallingCard">No puedes colocar Tarjetas de LLamada en tu Merchant OutBox</string>
	<string name="TooltipOutboxFolderLevels">La profundidad de carpetas anidades es superior a 3</string>
	<string name="TooltipOutboxTooManyFolders">El recuento de subcarpetas en el nivel superior supera las 20</string>
	<string name="TooltipOutboxTooManyObjects">El recuento de items en la carpeta de nivel superior supera los 200</string>
	<string name="TooltipDragOntoOwnChild">No puedes mover una carpeta a su carpeta secundaria</string>
	<string name="TooltipDragOntoSelf">No puedes mover una carpeta en si misma</string>

	<!-- searching - generic -->
	<string name="Searching">Buscando...</string>
	<string name="NoneFound">Nada Hallado.</string>
	
	<!-- Indicates that an avatar's name or other similar datum is being retrieved. General usage. -->
	<string name="RetrievingData">Recuperando...</string>
	
	<string name="ReleaseNotes">Notas de Lanzamiento</string>
	
	<!-- Indicates something is being loaded. Maybe should be merged with RetrievingData -->
	<string name="LoadingData">Cargando...</string>
	
	<!-- namecache -->
	<!-- Avatar name: text shown for LLUUID::null -->
	<string name="AvatarNameNobody">(nadie)</string>
	
	<!-- Avatar name: text shown while fetching name -->
	<string name="AvatarNameWaiting">(esperando)</string>
	
	<!-- Avatar name: text shown as an alternative to AvatarNameFetching, easter egg. -->
	<string name="AvatarNameHippos">(hippos)</string>
	
	<!-- Group name: text shown for LLUUID::null -->
	<string name="GroupNameNone">(ninguno)</string>
	
	<!-- Asset errors. Used in llassetstorage.cpp, translation from error code to error message. -->
	<string name="AssetErrorNone">Sin errores</string>
	<string name="AssetErrorRequestFailed">Petición de Activos: fallida</string>
	<string name="AssetErrorNonexistentFile">Petición de Activos: archivo inexistente</string>
	<string name="AssetErrorNotInDatabase">Petición de Activos: activo no hallado en la base de datos</string>
	<string name="AssetErrorEOF">Fin de archivo</string>
	<string name="AssetErrorCannotOpenFile">No se puede abrir el archivo</string>
	<string name="AssetErrorFileNotFound">Archivo no encontrado</string>
	<string name="AssetErrorTCPTimeout">Tiempo de espera en transferencia de archivo agotado</string>
	<string name="AssetErrorCircuitGone">El circuito se ha ido</string>
	<string name="AssetErrorPriceMismatch">El Visor y el Servidor no coinciden con el precio</string>
	<string name="AssetErrorUnknownStatus">Estado desconocido</string>
	
	<!-- llvoavatar. Displayed in the avatar's chat bubble -->
	<string name="AvatarEditingAppearance">(Editando Apariencia)</string>
	<string name="AvatarAway">Ausente</string>
	<string name="AvatarBusy">Ocupado</string>
	<string name="AvatarMuted">Bloqueado</string>
	
	<!-- animations -->
	<string name="anim_express_afraid">Miedo</string>
	<string name="anim_express_anger">Enfado</string>
	<string name="anim_away">Ausente</string>
	<string name="anim_backflip">Salto mortal atrás</string>
	<string name="anim_express_laugh">Carcajada</string>
	<string name="anim_express_toothsmile">Gran sonrisa</string>
	<string name="anim_blowkiss">Mandar un beso</string>
	<string name="anim_express_bored">Aburrimiento</string>
	<string name="anim_bow">Reverencia</string>
	<string name="anim_clap">Aplauso</string>
	<string name="anim_courtbow">Reverencia floreada</string>
	<string name="anim_express_cry">Llanto</string>
	<string name="anim_dance1">Baile 1</string>
	<string name="anim_dance2">Baile 2</string>
	<string name="anim_dance3">Baile 3</string>
	<string name="anim_dance4">Baile 4</string>
	<string name="anim_dance5">Baile 5</string>
	<string name="anim_dance6">Baile 6</string>
	<string name="anim_dance7">Baile 7</string>
	<string name="anim_dance8">Baile 8</string>
	<string name="anim_express_disdain">Desdén</string>
	<string name="anim_drink">Beber</string>
	<string name="anim_express_embarrased">Avergonzado</string>
	<string name="anim_angry_fingerwag">Negar con el dedo</string>
	<string name="anim_fist_pump">Gesto de Victoria</string>
	<string name="anim_yoga_float">Yoga flotando</string>
	<string name="anim_express_frown">Fruncir el ceño</string>
	<string name="anim_impatient">Impaciente</string>
	<string name="anim_jumpforjoy">Salto de alegría</string>
	<string name="anim_kissmybutt">Bésame el culo</string>
	<string name="anim_express_kiss">Besar</string>
	<string name="anim_laugh_short">Reír</string>
	<string name="anim_musclebeach">Sacar músculo</string>
	<string name="anim_no_unhappy">No (con enfado)</string>
	<string name="anim_no_head">No</string>
	<string name="anim_nyanya">Ña-Ña-Ña</string>
	<string name="anim_punch_onetwo">Puñetazo uno-dos</string>
	<string name="anim_express_open_mouth">Abrir la boca</string>
	<string name="anim_peace">Paz</string>
	<string name="anim_point_you">Señalar a otro/a</string>
	<string name="anim_point_me">Señalarse</string>
	<string name="anim_punch_l">Puñetazo izquierdo</string>
	<string name="anim_punch_r">Puñetazo derecho</string>
	<string name="anim_rps_countdown">PPT cuenta</string>
	<string name="anim_rps_paper">PPT papel</string>
	<string name="anim_rps_rock">PPT piedra</string>
	<string name="anim_rps_scissors">PPT tijera</string>
	<string name="anim_express_repulsed">Rechazo</string>
	<string name="anim_kick_roundhouse_r">Patada circular</string>
	<string name="anim_express_sad">Triste</string>
	<string name="anim_salute">Saludo militar</string>
	<string name="anim_shout">Gritar</string>
	<string name="anim_express_shrug">Encogerse de hombros</string>
	<string name="anim_express_smile">Sonreír</string>
	<string name="anim_smoke_idle">Fumar: en la mano</string>
	<string name="anim_smoke_inhale">Fumar: Inhalar</string>
	<string name="anim_smoke_throw_down">Fumar: tirar el cigarro</string>
	<string name="anim_express_surprise">Sorpresa</string>
	<string name="anim_sword_strike_r">Estocada</string>
	<string name="anim_angry_tantrum">Berrinche</string>
	<string name="anim_express_tongue_out">Sacar la lengua</string>
	<string name="anim_hello">Agitar la mano</string>
	<string name="anim_whisper">Susurrar</string>
	<string name="anim_whistle">Silbar</string>
	<string name="anim_express_wink">Guiño</string>
	<string name="anim_wink_hollywood">Guiño (Hollywood)</string>
	<string name="anim_express_worry">Preocuparse</string>
	<string name="anim_yes_happy">Sí (contento)</string>
	<string name="anim_yes_head">Si</string>
	
	<!-- build floater -->
	<string name="multiple_textures">Múltiple</string>

	<!-- world map -->	
	<string name="texture_loading">Cargando...</string>
	<string name="worldmap_offline">Desconectado</string>
	
	<!-- animations uploading status codes -->
	<string name="Ok">OK</string>
	
	<!-- Chat -->
	<string name="whisper">Susurra:</string>
	<string name="shout">Grita:</string>
	
	<!-- Sim Access labels -->
	<string name="SIM_ACCESS_PG">PG</string>
	<string name="SIM_ACCESS_MATURE">Mature</string>
	<string name="SIM_ACCESS_ADULT">Adulto</string>
	<string name="SIM_ACCESS_DOWN">Desconectado</string>
	<string name="SIM_ACCESS_MIN">Desconocido</string>
	
	<!-- For use when we do not have land type back from the server -->
	<string name="land_type_unknown">(Desconocido)</string>
	
	<!-- Covenant info -->
	<string name="covenant_never_modified">Última Modificación: (nunca)</string>
	<string name="covenant_modified">Última Modificación: </string>
	
	<!-- File load/save dialogs -->
	<string name="all_files">Todos los Archivos</string>
	<string name="sound_files">Sonidos</string>
	<string name="animation_files">Animaciones</string>
	<string name="image_files">Imágenes</string>
	<string name="save_file_verb">Guardar</string>
	<string name="load_file_verb">Cargar</string>
	<string name="targa_image_files">Imágenes Targa</string>
	<string name="bitmap_image_files">Imágenes de Mapa de Bits</string>
	<string name="avi_movie_file">Película AVI</string>
	<string name="xaf_animation_file">Animación XAF</string>
	<string name="xml_file">Archivo XML</string>
	<string name="raw_file">Archivo RAW</string>
	<string name="compressed_image_files">Imágenes Comprimidas</string>
	<string name="load_files">Cargar Archivos</string>
	<string name="choose_the_directory">Seleccionar Directorio</string>
	
	<string name="Sound: ">Sonido: </string>
	
	<!-- LSL Usage Hover Tips -->
	<string name="LSLTipSleepTime">
		Pausa el script por [SLEEP_TIME] segundos.
	</string>
	
	<string name="LSLTipText_llSin">
		float llSin(float theta)
Devuelve el seno de theta (theta en radianes)
	</string>
	<string name="LSLTipText_llCos">
		float llCos(float theta)
Devuelve el coseno de theta (theta en radianes)
	</string>
	<string name="LSLTipText_llTan">
		float llTan(float theta)
Devuelve la tangente de theta (theta en radianes)
  </string>
  <string name="LSLTipText_llAtan2">
		float llAtan2(float y, float x)
Devuelve el arcotangente2 de y, x
  </string>
  <string name="LSLTipText_llSqrt">
		float llSqrt(float val)
Devuelve la raíz cuadrada de val, o devuelve 0 y desencadena un error para resultados imaginarios
  </string>
  <string name="LSLTipText_llPow">
		float llPow(float base, float exponent)
Devuelve la base elevada a la potencia del exponente, o devuelve 0 y desencadena un error para resultados imaginarios		
  </string>
  <string name="LSLTipText_llAbs">
		integer llAbs(integer val)
Devuelve el positivo de val
  </string>
  <string name="LSLTipText_llFabs">
	float llFabs(float val)
Devuelve el positivo de val
  </string>
	<string name="LSLTipText_llFrand">
		float llFrand(float mag)
Devuelve un número seudo aleatoreo en el rango [0,mag) o (mag,0]
  </string>
  <string name="LSLTipText_llFloor">
		integer llFloor(float val)
Returns largest integer value &lt;= val
  </string>
  <string name="LSLTipText_llCeil">
integer llCeil(float val)
Returns smallest integer value &gt;= val
  </string>
  <string name="LSLTipText_llRound">
integer llRound(float val)
Returns val rounded to the nearest integer
  </string>
  <string name="LSLTipText_llVecMag">
float llVecMag(vector v)
Returns the magnitude of v
  </string>
  <string name="LSLTipText_llVecNorm">
vector llVecNorm(vector v)
Returns the v normalized
  </string>
  <string name="LSLTipText_llVecDist">
float llVecDist(vector v1, vector v2)
Returns the 3D distance between v1 and v2
  </string>
  <string name="LSLTipText_llRot2Euler">
vector llRot2Euler(rotation q)
Returns the Euler representation (roll, pitch, yaw) of q
  </string>
  <string name="LSLTipText_llEuler2Rot">
rotation llEuler2Rot(vector v)
Returns the rotation representation of Euler Angles v
  </string>
  <string name="LSLTipText_llAxes2Rot">
rotation llAxes2Rot(vector fwd, vector left, vector up)
Returns the rotation defined by the coordinate axes
  </string>
  <string name="LSLTipText_llRot2Fwd">
vector llRot2Fwd(rotation q)
Returns the forward vector defined by q
  </string>
  <string name="LSLTipText_llRot2Left">
vector llRot2Left(rotation q)
Returns the left vector defined by q
  </string>
  <string name="LSLTipText_llRot2Up">
vector llRot2Up(rotation q)
Returns the up vector defined by q
  </string>
  <string name="LSLTipText_llRotBetween">
rotation llRotBetween(vector v1, vector v2)
Returns the rotation to rotate v1 to v2
  </string>
  <string name="LSLTipText_llWhisper">
llWhisper(integer channel, string msg)
Whispers the text of msg on channel
  </string>
  <string name="LSLTipText_llSay">
llSay(integer channel, string msg)
Says the text of msg on channel
  </string>
  <string name="LSLTipText_llShout">
llShout(integer channel, string msg)
Shouts the text of msg on channel
  </string>
  <string name="LSLTipText_llListen">
integer llListen(integer channel, string name, key id, string msg)
Sets a callback for msg on channel from name and id (name, id, and/or msg can be empty) and returns an identifier that can be used to deactivate or remove the listen
  </string>
  <string name="LSLTipText_llListenControl">
llListenControl(integer number, integer active)
Makes a listen event callback active or inactive
  </string>
  <string name="LSLTipText_llListenRemove">
llListenRemove(integer number)
Removes listen event callback number
  </string>
  <string name="LSLTipText_llSensor">
llSensor(string name, key id, integer type, float range, float arc)
Performs a single scan for name and id with type (AGENT, ACTIVE, PASSIVE, and/or SCRIPTED) within range meters and arc radians of forward vector (name, id, and/or keytype can be empty or 0)
  </string>
  <string name="LSLTipText_llSensorRepeat">
llSensorRepeat(string name, key id, integer type, float range, float arc, float rate)
Sets a callback for name and id with type (AGENT, ACTIVE, PASSIVE, and/or SCRIPTED) within range meters and arc radians of forward vector (name, id, and/or keytype can be empty or 0) and repeats every rate seconds
  </string>
  <string name="LSLTipText_llSensorRemove">
llSensorRemove()
Removes the sensor setup by llSensorRepeat
  </string>
  <string name="LSLTipText_llDetectedName">
string llDetectedName(integer number)
Returns the name of detected object number (returns empty string if number is not a valid sensed object)
  </string>
  <string name="LSLTipText_llDetectedKey">
key llDetectedKey(integer number)
Returns the key of detected object number (returns empty key if number is not a valid sensed object)
  </string>
  <string name="LSLTipText_llDetectedOwner">
key llDetectedOwner(integer number)
Returns the key of detected object&apos;s owner (returns empty key if number is not a valid sensed object)
  </string>
  <string name="LSLTipText_llDetectedType">
integer llDetectedType(integer number)
Returns the type (AGENT, ACTIVE, PASSIVE, SCRIPTED) of detected object (returns 0 if number is not a valid sensed object)
  </string>
  <string name="LSLTipText_llDetectedPos">
vector llDetectedPos(integer number)
Returns the position of detected object number (returns &lt;0,0,0&gt; if number is not a valid sensed object)
  </string>
  <string name="LSLTipText_llDetectedVel">
vector llDetectedVel(integer number)
Returns the velocity of detected object number (returns &lt;0,0,0&gt; if number is not a valid sensed object)
  </string>
  <string name="LSLTipText_llDetectedGrab">
vector llDetectedGrab(integer number)
Returns the grab offset of the user touching object (returns &lt;0,0,0&gt; if number is not a valid sensed object)
  </string>
  <string name="LSLTipText_llDetectedRot">
rotation llDetectedRot(integer number)
Returns the rotation of detected object number (returns &lt;0,0,0,1&gt; if number is not a valid sensed object)
  </string>
  <string name="LSLTipText_llDetectedGroup">
integer llDetectedGroup(integer number)
Returns TRUE if detected object is part of same group as owner
  </string>
  <string name="LSLTipText_llDetectedLinkNumber">
integer llDetectedLinkNumber(integer number)
Returns the link position of the triggered event for touches and collisions only
  </string>
  <string name="LSLTipText_llDie">
llDie()
Deletes the object
  </string>
  <string name="LSLTipText_llGround">
float llGround(vector offset)
Returns the ground height below the object position + offset
  </string>
  <string name="LSLTipText_llCloud">
float llCloud(vector offset)
Returns the cloud density at the object position + offset
  </string>
  <string name="LSLTipText_llWind">
vector llWind(vector offset)
Returns the wind velocity at the object position + offset
  </string>
  <string name="LSLTipText_llSetStatus">
llSetStatus(integer status, integer value)
Sets status (STATUS_PHYSICS, STATUS_PHANTOM, STATUS_BLOCK_GRAB, STATUS_ROTATE_X, STATUS_ROTATE_Y, and/or STATUS_ROTATE_Z) to value
  </string>
  <string name="LSLTipText_llGetStatus">
integer llGetStatus(integer status)
Returns value of status (STATUS_PHYSICS, STATUS_PHANTOM, STATUS_BLOCK_GRAB, STATUS_ROTATE_X, STATUS_ROTATE_Y, and/or STATUS_ROTATE_Z)
  </string>
  <string name="LSLTipText_llSetScale">
llSetScale(vector scale)
Sets the scale of the prim
  </string>
  <string name="LSLTipText_llGetScale">
vector llGetScale()
Returns the scale of the prim
  </string>
  <string name="LSLTipText_llSetColor">
llSetColor(vector color, integer face)
Sets the color on face of the prim
  </string>
  <string name="LSLTipText_llGetAlpha">
float llGetAlpha(integer face)
Returns the alpha of face
  </string>
  <string name="LSLTipText_llSetAlpha">
llSetAlpha(float alpha, integer face)
Sets the alpha on face
  </string>
  <string name="LSLTipText_llGetColor">
vector llGetColor(integer face)
Returns the color on face
  </string>
  <string name="LSLTipText_llSetTexture">
llSetTexture(string texture, integer face)
Sets the texture of face or ALL_SIDES
  </string>
  <string name="LSLTipText_llScaleTexture">
llScaleTexture(float u, float v, integer face)
Sets the texture u &amp; v scales for the chosen face or ALL_SIDES
  </string>
  <string name="LSLTipText_llOffsetTexture">
llOffsetTexture(float u, float v, integer face)
Sets the texture u &amp; v offsets for the chosen face or ALL_SIDES
  </string>
  <string name="LSLTipText_llRotateTexture">
llRotateTexture(float rotation, integer face)
Sets the texture rotation for the chosen face
  </string>
  <string name="LSLTipText_llGetTexture">
string llGetTexture(integer face)
Returns a string that is the texture on face (the inventory name if it is a texture in the prim&apos;s inventory, otherwise the key)
  </string>
  <string name="LSLTipText_llSetPos">
llSetPos(vector pos)
Moves the object or prim towards pos without using physics (if the script isn&apos;t physical)
  </string>
  <string name="LSLTipText_llGetPos">
vector llGetPos()
Returns the position of the task in region coordinates
  </string>
  <string name="LSLTipText_llGetLocalPos">
vector llGetLocalPos()
Returns the position relative to the root
  </string>
  <string name="LSLTipText_llSetRot">
llSetRot(rotation rot)
Sets the rotation
  </string>
  <string name="LSLTipText_llGetRot">
rotation llGetRot()
Returns the rotation relative to the region&apos;s axes
  </string>
  <string name="LSLTipText_llGetLocalRot">
rotation llGetLocalRot()
Returns the rotation local to the root
  </string>
  <string name="LSLTipText_llSetForce">
llSetForce(vector force, integer local)
Applies force to the object (if the script is physical), in local coords if local == TRUE
  </string>
  <string name="LSLTipText_llGetForce">
vector llGetForce()
Returns the force (if the script is physical)
  </string>
  <string name="LSLTipText_llTarget">
integer llTarget(vector position, float range)
Sets positions within range of position as a target and return an ID for the target
  </string>
  <string name="LSLTipText_llTargetRemove">
llTargetRemove(integer number)
Removes positional target number registered with llTarget
  </string>
  <string name="LSLTipText_llRotTarget">
integer llRotTarget(rotation rot, float error)
Set rotations with error of rot as a rotational target and return an ID for the rotational target
  </string>
  <string name="LSLTipText_llRotTargetRemove">
llRotTargetRemove(integer number)
Removes rotational target number registered with llRotTarget
  </string>
  <string name="LSLTipText_llMoveToTarget">
llMoveToTarget(vector target, float tau)
Critically damps to target in tau seconds (if the script is physical)
  </string>
  <string name="LSLTipText_llStopMoveToTarget">
llStopMoveToTarget()
Stops critically damped motion
  </string>
  <string name="LSLTipText_llApplyImpulse">
llApplyImpulse(vector force, integer local)
Applies impulse to object (if the script is physical), in local coords if local == TRUE
  </string>
  <string name="LSLTipText_llApplyRotationalImpulse">
llApplyRotationalImpulse(vector force, integer local)
Applies rotational impulse to object (if the script is physical), in local coords if local == TRUE
  </string>
  <string name="LSLTipText_llSetTorque">
llSetTorque(vector torque, integer local)
Sets the torque of object (if the script is physical), in local coords if local == TRUE
  </string>
  <string name="LSLTipText_llGetTorque">
vector llGetTorque()
Returns the torque (if the script is physical)
  </string>
  <string name="LSLTipText_llSetForceAndTorque">
llSetForceAndTorque(vector force, vector torque, integer local)
Sets the force and torque of object (if the script is physical), in local coords if local == TRUE
  </string>
  <string name="LSLTipText_llGetVel">
vector llGetVel()
Returns the velocity of the object
  </string>
  <string name="LSLTipText_llGetAccel">
vector llGetAccel()
Returns the acceleration of the object relative to the region&apos;s axes
  </string>
  <string name="LSLTipText_llGetOmega">
vector llGetOmega()
Returns the rotation velocity in radians per second
  </string>
  <string name="LSLTipText_llGetTimeOfDay">
float llGetTimeOfDay()
Returns the time in seconds since [SECOND_LIFE] server midnight or since region up-time, whichever is smaller
  </string>
  <string name="LSLTipText_llGetWallclock">
float llGetWallclock()
Returns the time in seconds since midnight California Pacific time (PST/PDT)
  </string>
  <string name="LSLTipText_llGetTime">
float llGetTime()
Returns the time in seconds since the last region reset, script reset, or call to either llResetTime or llGetAndResetTime
  </string>
  <string name="LSLTipText_llResetTime">
llResetTime()
Sets the script timer to zero
  </string>
  <string name="LSLTipText_llGetAndResetTime">
float llGetAndResetTime()
Returns the script time in seconds and then resets the script timer to zero
  </string>
  <string name="LSLTipText_llSound">
llSound(string sound, float volume, integer queue, integer loop)
Plays sound at volume and whether it should loop or not
  </string>
  <string name="LSLTipText_llPlaySound">
llPlaySound(string sound, float volume)
Plays attached sound once at volume (0.0 - 1.0)
  </string>
  <string name="LSLTipText_llLoopSound">
llLoopSound(string sound, float volume)
Plays attached sound looping indefinitely at volume (0.0 - 1.0)
  </string>
  <string name="LSLTipText_llLoopSoundMaster">
llLoopSoundMaster(string sound, float volume)
Plays attached sound looping at volume (0.0 - 1.0), declares it a sync master
  </string>
  <string name="LSLTipText_llLoopSoundSlave">
llLoopSoundSlave(string sound, float volume)
Plays attached sound looping at volume (0.0 - 1.0), synced to most audible sync master
  </string>
  <string name="LSLTipText_llPlaySoundSlave">
llPlaySoundSlave(string sound, float volume)
Plays attached sound once at volume (0.0 - 1.0), synced to next loop of most audible sync master
  </string>
  <string name="LSLTipText_llTriggerSound">
llTriggerSound(string sound, float volume)
Plays sound at volume (0.0 - 1.0), centered at but not attached to object
  </string>
  <string name="LSLTipText_llStopSound">
llStopSound()
Stops currently attached sound
  </string>
  <string name="LSLTipText_llPreloadSound">
llPreloadSound(string sound)
Preloads a sound on viewers within range
  </string>
  <string name="LSLTipText_llGetSubString">
string llGetSubString(string src, integer start, integer end)
Returns the indicated substring
  </string>
  <string name="LSLTipText_llDeleteSubString">
string llDeleteSubString(string src, integer start, integer end)
Removes the indicated substring and returns the result
  </string>
  <string name="LSLTipText_llInsertString">
string llInsertString(string dst, integer position, string src)
Returns a destination string dst with the string src inserted starting at position pos
  </string>
  <string name="LSLTipText_llToUpper">
string llToUpper(string src)
Returns a string that is src with all upper-case characters
  </string>
  <string name="LSLTipText_llToLower">
string llToLower(string src)
Returns a string that is src with all lower-case characters
  </string>
  <string name="LSLTipText_llGiveMoney">
llGiveMoney(key destination, integer amount)
Transfers amount of [CURRENCY] from script owner to destination
  </string>
  <string name="LSLTipText_llMakeExplosion">
llMakeExplosion(integer particles, float scale, float vel, float lifetime, float arc, string texture, vector offset)
Makes a round explosion of particles
  </string>
  <string name="LSLTipText_llMakeFountain">
llMakeFountain(integer particles, float scale, float vel, float lifetime, float arc, integer bounce, string texture, vector offset, float bounce_offset)
Makes a fountain of particles
  </string>
  <string name="LSLTipText_llMakeSmoke">
llMakeSmoke(integer particles, float scale, float vel, float lifetime, float arc, string texture, vector offset)
Makes smoke like particles
  </string>
  <string name="LSLTipText_llMakeFire">
llMakeFire(integer particles, float scale, float vel, float lifetime, float arc, string texture, vector offset)
Makes fire like particles
  </string>
  <string name="LSLTipText_llRezObject">
llRezObject(string inventory, vector pos, vector vel, rotation rot, integer param)
Instantiates owner&apos;s inventory object at pos with velocity vel and rotation rot with start parameter param
  </string>
  <string name="LSLTipText_llLookAt">
llLookAt(vector target, float strength, float damping)
Causes object to point its up axis (positive z) towards target, while keeping its forward axis (positive x) below the horizon
  </string>
  <string name="LSLTipText_llStopLookAt">
llStopLookAt()
Stops causing object to point at a target
  </string>
  <string name="LSLTipText_llSetTimerEvent">
llSetTimerEvent(float sec)
Causes the timer event to be triggered a maximum of once every sec seconds
  </string>
  <string name="LSLTipText_llSleep">
llSleep(float sec)
Puts the script to sleep for sec seconds
  </string>
  <string name="LSLTipText_llGetMass">
float llGetMass()
Returns the mass of object that the script is attached to
  </string>
  <string name="LSLTipText_llCollisionFilter">
llCollisionFilter(string name, key id, integer accept)
Sets the collision filter, exclusively or inclusively. If accept == TRUE, only accept collisions with objects name and id (either is optional), otherwise with objects not name or id
  </string>
  <string name="LSLTipText_llTakeControls">
llTakeControls(integer controls, integer accept, integer pass_on)
Allows for intercepting keyboard and mouse clicks from the agent the script has permissions for
  </string>
  <string name="LSLTipText_llReleaseControls">
llReleaseControls()
Stops taking inputs that were taken with llTakeControls
  </string>
  <string name="LSLTipText_llAttachToAvatar">
llAttachToAvatar(integer attach_point)
Attaches the object to the avatar who has granted permission to the script
  </string>
  <string name="LSLTipText_llDetachFromAvatar">
llDetachFromAvatar()
Detaches object from avatar
  </string>
  <string name="LSLTipText_llTakeCamera">
llTakeCamera(key avatar)
Moves avatar&apos;s viewpoint to task
  </string>
  <string name="LSLTipText_llReleaseCamera">
llReleaseCamera(key avatar)
Returns camera to agent avatar
  </string>
  <string name="LSLTipText_llGetOwner">
key llGetOwner()
Returns the object owner&apos;s UUID
  </string>
  <string name="LSLTipText_llInstantMessage">
llInstantMessage(key user, string message)
Sends the specified string as an Instant Message to the user
  </string>
  <string name="LSLTipText_llEmail">
llEmail(string address, string subject, string message)
Sends an email to address with the subject and message
  </string>
  <string name="LSLTipText_llGetNextEmail">
llGetNextEmail(string address, string subject)
Gets the next waiting email that comes from address, with specified subject
  </string>
  <string name="LSLTipText_llGetKey">
key llGetKey()
Returns the key of the prim the script is attached to
  </string>
  <string name="LSLTipText_llSetBuoyancy">
llSetBuoyancy(float buoyancy)
Sets the buoyancy of the task or object (0 is disabled, &lt; 1.0 sinks, 1.0 floats, &gt; 1.0 rises)
  </string>
  <string name="LSLTipText_llSetHoverHeight">
llSetHoverHeight(float height, integer water, float tau)
Critically damps to a height above the ground (or water) in tau seconds
  </string>
  <string name="LSLTipText_llStopHover">
llStopHover()
Stops hovering to a height
  </string>
  <string name="LSLTipText_llMinEventDelay">
llMinEventDelay(float delay)
Sets the minimum time between events being handled
  </string>
  <string name="LSLTipText_llSoundPreload">
llSoundPreload(string sound)
Preloads a sound on viewers within range
  </string>
  <string name="LSLTipText_llRotLookAt">
llRotLookAt(rotation target, float strength, float damping)
Causes object to point its forward axis towards target
  </string>
  <string name="LSLTipText_llStringLength">
integer llStringLength(string str)
Returns the length of string
  </string>
  <string name="LSLTipText_llStartAnimation">
llStartAnimation(string anim)
Starts animation anim for agent that granted PERMISSION_TRIGGER_ANIMATION if the permission has not been revoked
  </string>
  <string name="LSLTipText_llStopAnimation">
llStopAnimation(string anim)
Stops animation anim for agent that granted permission
  </string>
  <string name="LSLTipText_llPointAt">
llPointAt(vector pos)
Makes agent that owns object point at pos
  </string>
  <string name="LSLTipText_llStopPointAt">
llStopPointAt()
Stops pointing agent that owns object
  </string>
  <string name="LSLTipText_llTargetOmega">
llTargetOmega(vector axis, float spinrate, float gain)
Rotates the object around axis at spinrate with strength gain
  </string>
  <string name="LSLTipText_llGetStartParameter">
integer llGetStartParameter()
Returns an integer that is the script start/rez parameter
  </string>
  <string name="LSLTipText_llGodLikeRezObject">
llGodLikeRezObject(key inventory, vector pos)
Rezzes directly off of UUID if owner is in God Mode
  </string>
  <string name="LSLTipText_llRequestPermissions">
llRequestPermissions(key agent, integer perm)
Asks the agent for permission to run certain classes of functions
  </string>
  <string name="LSLTipText_llGetPermissionsKey">
key llGetPermissionsKey()
Returns the key of the avatar that last granted permissions to the script
  </string>
  <string name="LSLTipText_llGetPermissions">
integer llGetPermissions()
Returns an integer bitfield with the permissions that have been granted
  </string>
  <string name="LSLTipText_llGetLinkNumber">
integer llGetLinkNumber()
Returns the link number of the prim containing the script (0 means not linked, 1 the prim is the root, 2 the prim is the first child, etc)
  </string>
  <string name="LSLTipText_llSetLinkColor">
llSetLinkColor(integer linknumber, vector color, integer face)
Sets face to color if a task exists in the link chain at linknumber
  </string>
  <string name="LSLTipText_llCreateLink">
llCreateLink(key target, integer parent)
Attempts to link the script&apos;s object with the target (requires that PERMISSION_CHANGE_LINKS be granted). If parent == TRUE, then the script&apos;s object becomes the root
  </string>
  <string name="LSLTipText_llBreakLink">
llBreakLink(integer linknum)
Delinks the prim with the given link number in a linked object set (requires that PERMISSION_CHANGE_LINKS be granted)
  </string>
  <string name="LSLTipText_llBreakAllLinks">
llBreakAllLinks()
Delinks all prims in the link set (requires that PERMISSION_CHANGE_LINKS be granted)
  </string>
  <string name="LSLTipText_llGetLinkKey">
key llGetLinkKey(integer linknumber)
Returns the key of the linked prim linknumber
  </string>
  <string name="LSLTipText_llGetLinkName">
string llGetLinkName(integer linknumber)
Returns the name of linknumber in a link set
  </string>
  <string name="LSLTipText_llGetInventoryNumber">
integer llGetInventoryNumber(integer type)
Returns the number of items of a given type (INVENTORY_* flag) in the prim&apos;s inventory
  </string>
  <string name="LSLTipText_llGetInventoryName">
string llGetInventoryName(integer type, integer number)
Returns the name of the inventory item number of a given type
  </string>
  <string name="LSLTipText_llSetScriptState">
llSetScriptState(string name, integer run)
Sets the running state of the specified script
  </string>
  <string name="LSLTipText_llGetEnergy">
float llGetEnergy()
Returns how much energy is in the object as a percentage of maximum
  </string>
  <string name="LSLTipText_llGiveInventory">
llGiveInventory(key destination, string inventory)
Gives inventory to destination
  </string>
  <string name="LSLTipText_llRemoveInventory">
llRemoveInventory(string item)
Removes the named inventory item
  </string>
  <string name="LSLTipText_llSetText">
llSetText(string text, vector color, float alpha)
Displays text that hovers over the prim with specific color and translucency specified with alpha
  </string>
  <string name="LSLTipText_llWater">
float llWater(vector offset)
Returns the water height below the object position + offset
  </string>
  <string name="LSLTipText_llPassTouches">
llPassTouches(integer pass)
If pass == TRUE, touches are passed from children on to parents
  </string>
  <string name="LSLTipText_llRequestAgentData">
key llRequestAgentData(key id, integer data)
Requests data about agent id. When data is available the dataserver event will be raised.
  </string>
  <string name="LSLTipText_llRequestInventoryData">
key llRequestInventoryData(string name)
Requests data from object&apos;s inventory object. When data is available the dataserver event will be raised.
  </string>
  <string name="LSLTipText_llSetDamage">
llSetDamage(float damage)
Sets the amount of damage that will be done when this object hits an avatar.
  </string>
  <string name="LSLTipText_llTeleportAgentHome">
llTeleportAgentHome(key id)
Teleports avatar on the owner&apos;s land to their home location without any warning
  </string>
  <string name="LSLTipText_llModifyLand">
llModifyLand(integer action, integer brush)
Modifies land using the specified action on the specified brush size of land
  </string>
  <string name="LSLTipText_llCollisionSound">
llCollisionSound(string impact_sound, float impact_volume)
Suppresses default collision sounds, replaces default impact sounds with impact_sound at the volume impact_volume
  </string>
  <string name="LSLTipText_llCollisionSprite">
llCollisionSprite(string impact_sprite)
Suppresses default collision sprites, replaces default impact sprite with impact_sprite (use an empty string to just suppress)
  </string>
  <string name="LSLTipText_llGetAnimation">
string llGetAnimation(key id)
Returns the name of the currently playing locomotion animation for avatar id
  </string>
  <string name="LSLTipText_llResetScript">
llResetScript()
Resets the script
  </string>
  <string name="LSLTipText_llMessageLinked">
llMessageLinked(integer linknum, integer num, string str, key id)
Allows scripts in the same object to communicate. Triggers a link_message event with the same parameters num, str, and id in all scripts in the prim(s) described by linknum.
  </string>
  <string name="LSLTipText_llPushObject">
llPushObject(key id, vector impulse, vector ang_impulse, integer local)
Applies impulse and ang_impulse to object id
  </string>
  <string name="LSLTipText_llPassCollisions">
llPassCollisions(integer pass)
If pass == TRUE, collisions are passed from children on to parents (default is FALSE)
  </string>
  <string name="LSLTipText_llGetScriptName">
string llGetScriptName()
Returns the name of the script that this function is used in
  </string>
  <string name="LSLTipText_llGetNumberOfSides">
integer llGetNumberOfSides()
Returns the number of faces (or sides) of the prim
  </string>
  <string name="LSLTipText_llAxisAngle2Rot">
rotation llAxisAngle2Rot(vector axis, float angle)
Returns the rotation that is a generated angle about axis
  </string>
  <string name="LSLTipText_llRot2Axis">
vector llRot2Axis(rotation rot)
Returns the rotation axis represented by rot
  </string>
  <string name="LSLTipText_llRot2Angle">
float llRot2Angle(rotation rot)
Returns the rotation angle represented by rot
  </string>
  <string name="LSLTipText_llAcos">
float llAcos(float val)
Returns the arccosine in radians of val
  </string>
  <string name="LSLTipText_llAsin">
float llAsin(float val)
Returns the arcsine in radians of val
  </string>
  <string name="LSLTipText_llAngleBetween">
float llAngleBetween(rotation a, rotation b)
Returns angle between rotation a and b
  </string>
  <string name="LSLTipText_llGetInventoryKey">
key llGetInventoryKey(string name)
Returns the key that is the UUID of the inventory name
  </string>
  <string name="LSLTipText_llAllowInventoryDrop">
llAllowInventoryDrop(integer add)
If add == TRUE, users without modify permissions can still drop inventory items onto a prim
  </string>
  <string name="LSLTipText_llGetSunDirection">
vector llGetSunDirection()
Returns a normalized vector of the direction of the sun in the region
  </string>
  <string name="LSLTipText_llGetTextureOffset">
vector llGetTextureOffset(integer face)
Returns the texture offset of face in the x and y components of a vector
  </string>
  <string name="LSLTipText_llGetTextureScale">
vector llGetTextureScale(integer side)
Returns the texture scale of side in the x and y components of a vector
  </string>
  <string name="LSLTipText_llGetTextureRot">
float llGetTextureRot(integer side)
Returns the texture rotation of side
  </string>
  <string name="LSLTipText_llSubStringIndex">
integer llSubStringIndex(string source, string pattern)
Returns an integer that is the index in source where pattern first appears.
(Returns -1 if not found)
  </string>
  <string name="LSLTipText_llGetOwnerKey">
key llGetOwnerKey(key id)
Returns the owner of object id
  </string>
  <string name="LSLTipText_llGetCenterOfMass">
vector llGetCenterOfMass()
Returns the prim&apos;s center of mass (unless called from the root prim, where it returns the object&apos;s center of mass)
  </string>
  <string name="LSLTipText_llListSort">
list llListSort(list src, integer stride, integer ascending)
Sorts the list into blocks of stride, in ascending order if ascending == TRUE.
The sort order is affected by type.
  </string>
  <string name="LSLTipText_llGetListLength">
integer llGetListLength(list src)
Returns the number of elements in the list
  </string>
  <string name="LSLTipText_llList2Integer">
integer llList2Integer(list src, integer index)
Copies the integer at index in the list
  </string>
  <string name="LSLTipText_llList2Float">
float llList2Float(list src, integer index)
Copies the float at index in the list
  </string>
  <string name="LSLTipText_llList2String">
string llList2String(list src, integer index)
Copies the string at index in the list
  </string>
  <string name="LSLTipText_llList2Key">
key llList2Key(list src, integer index)
Copies the key at index in the list
  </string>
  <string name="LSLTipText_llList2Vector">
vector llList2Vector(list src, integer index)
Copies the vector at index in the list
  </string>
  <string name="LSLTipText_llList2Rot">
rotation llList2Rot(list src, integer index)
Copies the rotation at index in the list
  </string>
  <string name="LSLTipText_llList2List">
list llList2List(list src, integer start, integer end)
Copies the slice of the list from start to end
  </string>
  <string name="LSLTipText_llDeleteSubList">
list llDeleteSubList(list src, integer start, integer end)
Removes the slice from start to end and returns the remainder of the list
  </string>
  <string name="LSLTipText_llGetListEntryType">
integer llGetListEntryType(list src, integer index)
Returns the type of the index entry in the list
(TYPE_INTEGER, TYPE_FLOAT, TYPE_STRING, TYPE_KEY, TYPE_VECTOR, TYPE_ROTATION, or TYPE_INVALID if index is off list)
  </string>
  <string name="LSLTipText_llList2CSV">
string llList2CSV(list src)
Creates a string of comma separated values from list
  </string>
  <string name="LSLTipText_llCSV2List">
list llCSV2List(string src)
Creates a list from a string of comma separated values
  </string>
  <string name="LSLTipText_llListRandomize">
list llListRandomize(list src, integer stride)
Returns a randomized list of blocks of size stride
  </string>
  <string name="LSLTipText_llList2ListStrided">
list llList2ListStrided(list src, integer start, integer end, integer stride)
Copies the strided slice of the list from start to end
  </string>
  <string name="LSLTipText_llGetRegionCorner">
vector llGetRegionCorner()
Returns a vector in meters that is the global location of the south-west corner of the region which the object is in
  </string>
  <string name="LSLTipText_llListInsertList">
list llListInsertList(list dest, list src, integer start)
Returns a list that contains all the elements from dest but with the elements from src inserted at position start
  </string>
  <string name="LSLTipText_llListFindList">
integer llListFindList(list src, list test)
Returns the index of the first instance of test in src.
(Returns -1 if not found)
  </string>
  <string name="LSLTipText_llGetObjectName">
string llGetObjectName()
Returns the name of the prim which the script is attached to
  </string>
  <string name="LSLTipText_llSetObjectName">
llSetObjectName(string name)
Sets the prim&apos;s name to the name parameter
  </string>
  <string name="LSLTipText_llGetDate">
string llGetDate()
Returns the current date in the UTC time zone in the format YYYY-MM-DD
  </string>
  <string name="LSLTipText_llEdgeOfWorld">
integer llEdgeOfWorld(vector pos, vector dir)
Checks to see whether the border hit by dir from pos is the edge of the world (has no neighboring region)
  </string>
  <string name="LSLTipText_llGetAgentInfo">
integer llGetAgentInfo(key id)
Returns an integer bitfield containing the agent information about id.
Returns AGENT_FLYING, AGENT_ATTACHMENTS, AGENT_SCRIPTED, AGENT_SITTING, AGENT_ON_OBJECT, AGENT_MOUSELOOK, AGENT_AWAY, AGENT_BUSY, AGENT_TYPING, AGENT_CROUCHING, AGENT_ALWAYS_RUN, AGENT_WALKING and/or AGENT_IN_AIR.
  </string>
  <string name="LSLTipText_llAdjustSoundVolume">
llAdjustSoundVolume(float volume)
Adjusts volume of attached sound (0.0 - 1.0)
  </string>
  <string name="LSLTipText_llSetSoundQueueing">
llSetSoundQueueing(integer queue)
Sets whether attached sounds wait for the current sound to finish (If queue == TRUE then queuing is enabled, if FALSE queuing is disabled [default])
  </string>
  <string name="LSLTipText_llSetSoundRadius">
llSetSoundRadius(float radius)
Establishes a hard cut-off radius for audibility of scripted sounds (both attached and triggered)
  </string>
  <string name="LSLTipText_llKey2Name">
string llKey2Name(key id)
Returns the name of the prim or avatar specified by id.
(The id must be a valid rezzed prim or avatar key in the current simulator, otherwise an empty string is returned.)
  </string>
  <string name="LSLTipText_llSetTextureAnim">
llSetTextureAnim(integer mode, integer face, integer sizex, integer sizey, float start, float length, float rate)
Animates the texture on the specified face/faces
  </string>
  <string name="LSLTipText_llTriggerSoundLimited">
llTriggerSoundLimited(string sound, float volume, vector top_north_east, vector bottom_south_west)
Plays sound at volume (0.0 - 1.0), centered at but not attached to object, limited to the box defined by vectors top_north_east and bottom_south_west
  </string>
  <string name="LSLTipText_llEjectFromLand">
llEjectFromLand(key avatar)
Ejects avatar from the parcel
  </string>
  <string name="LSLTipText_llParseString2List">
list llParseString2List(string src, list separators, list spacers)
Breaks src into a list, discarding separators, keeping spacers
(separators and spacers must be lists of strings, maximum of 8 each)
  </string>
  <string name="LSLTipText_llOverMyLand">
integer llOverMyLand(key id)
Returns TRUE if id is over land owned by the script owner, otherwise FALSE
  </string>
  <string name="LSLTipText_llGetLandOwnerAt">
key llGetLandOwnerAt(vector pos)
Returns the key of the land owner, returns NULL_KEY if public
  </string>
  <string name="LSLTipText_llGetNotecardLine">
key llGetNotecardLine(string name, integer line)
Returns line line of notecard name via the dataserver event
  </string>
  <string name="LSLTipText_llGetAgentSize">
vector llGetAgentSize(key id)
If the avatar is in the same region, returns the size of the bounding box of the requested avatar by id, otherwise returns ZERO_VECTOR
  </string>
  <string name="LSLTipText_llSameGroup">
integer llSameGroup(key id)
Returns TRUE if avatar id is in the same region and has the same active group, otherwise FALSE
  </string>
  <string name="LSLTipText_llUnSit">
key llUnSit(key id)
If avatar identified by id is sitting on the object the script is attached to or is over land owned by the object&apos;s owner, the avatar is forced to stand up
  </string>
  <string name="LSLTipText_llGroundSlope">
vector llGroundSlope(vector offset)
Returns the ground slope below the object position + offset
  </string>
  <string name="LSLTipText_llGroundNormal">
vector llGroundNormal(vector offset)
Returns the ground normal below the object position + offset
  </string>
  <string name="LSLTipText_llGroundContour">
vector llGroundCountour(vector offset)
Returns the ground contour direction below the object position + offset
  </string>
  <string name="LSLTipText_llGetAttached">
integer llGetAttached()
Returns the object&apos;s attachment point, or 0 if not attached
  </string>
  <string name="LSLTipText_llGetFreeMemory">
integer llGetFreeMemory()
Returns the number of free bytes of memory the script can use
  </string>
  <string name="LSLTipText_llGetRegionName">
string llGetRegionName()
Returns the current region name
  </string>
  <string name="LSLTipText_llGetRegionTimeDilation">
float llGetRegionTimeDilation()
Returns the current time dilation as a float between 0.0 (full dilation) and 1.0 (no dilation)
  </string>
  <string name="LSLTipText_llGetRegionFPS">
float llGetRegionFPS()
Returns the mean region frames per second
  </string>
  <string name="LSLTipText_llParticleSystem">
llParticleSystem(list rules)
Creates a particle system based on rules.  An empty list removes the particle system.
List format is [ rule1, data1, rule2, data2 . . . rulen, datan ]
  </string>
  <string name="LSLTipText_llGroundRepel">
llGroundRepel(float height, integer water, float tau)
Critically damps to height if within height*0.5 of level (either above ground level, or above the higher of land and water if water == TRUE)
  </string>
  <string name="LSLTipText_llGiveInventoryList">
llGiveInventoryList(key target, string folder, list inventory)
Gives inventory items to target, creating a new folder to put them in
  </string>
  <string name="LSLTipText_llSetVehicleType">
llSetVehicleType(integer type)
Sets the vehicle to one of the default types
  </string>
  <string name="LSLTipText_llSetVehicleFloatParam">
llSetVehicleFloatParam(integer param, float value)
Sets the specified vehicle float parameter
  </string>
  <string name="LSLTipText_llSetVehicleVectorParam">
llSetVehicleVectorParam(integer param, vector vec)
Sets the specified vehicle vector parameter
  </string>
  <string name="LSLTipText_llSetVehicleRotationParam">
llSetVehicleVectorParam(integer param, rotation rot)
Sets the specified vehicle rotation parameter
  </string>
  <string name="LSLTipText_llSetVehicleFlags">
llSetVehicleFlags(integer flags)
Sets the enabled bits in &apos;flags&apos;
  </string>
  <string name="LSLTipText_llRemoveVehicleFlags">
llRemoveVehicleFlags(integer flags)
Removes the enabled bits in &apos;flags&apos;
  </string>
  <string name="LSLTipText_llSitTarget">
llSitTarget(vector offset, rotation rot)
Sets the sit location for the prim.  If offset == &lt;0,0,0&gt; then the sit target is removed.
  </string>
  <string name="LSLTipText_llAvatarOnSitTarget">
key llAvatarOnSitTarget()
If an avatar is seated on the sit target, returns the avatar&apos;s key, otherwise NULL_KEY
  </string>
  <string name="LSLTipText_llAddToLandPassList">
llAddToLandPassList(key avatar, float hours)
Adds avatar to the land pass list for hours, or indefinitely if hours is 0
  </string>
  <string name="LSLTipText_llSetTouchText">
llSetTouchText(string text)
Displays text rather than the default &apos;Touch&apos; in the pie menu
  </string>
  <string name="LSLTipText_llSetSitText">
llSetSitText(string text)
Displays text rather than the default &apos;Sit Here&apos; in the pie menu
  </string>
  <string name="LSLTipText_llSetCameraEyeOffset">
llSetCameraEyeOffset(vector offset)
Sets the camera eye offset for avatars that sit on the object
  </string>
  <string name="LSLTipText_llSetCameraAtOffset">
llSetCameraAtOffset(vector offset)
Sets the point the camera is looking at to offset for avatars that sit on the object
  </string>
  <string name="LSLTipText_llDumpList2String">
string llDumpList2String(list src, string separator)
Returns the list in a single string, using separator between the entries
  </string>
  <string name="LSLTipText_llScriptDanger">
integer llScriptDanger(vector pos)
Returns TRUE if pos is over public land, sandbox land, land that doesn&apos;t allow everyone to edit and build, or land that doesn&apos;t allow outside scripts
  </string>
  <string name="LSLTipText_llDialog">
llDialog(key avatar, string message, list buttons, integer chat_channel
Shows a dialog box on the avatar&apos;s screen with a message and up to 12 buttons.
If a button is pressed, the avatar says the text of the button label on chat_channel.
  </string>
  <string name="LSLTipText_llVolumeDetect">
llVolumeDetect(integer detect)
If detect = TRUE, object works much like Phantom, but triggers collision_start and collision_end events when other objects start and stop interpenetrating.
Must be applied to the root prim.
  </string>
  <string name="LSLTipText_llResetOtherScript">
llResetOtherScript(string name)
Resets script name
  </string>
  <string name="LSLTipText_llGetScriptState">
integer llGetScriptState(string name)
Returns TRUE if the script name is running
  </string>
  <string name="LSLTipText_llRemoteLoadScript">
DEPRECATED!  Please use llRemoteLoadScriptPin instead.
  </string>
  <string name="LSLTipText_llSetRemoteScriptAccessPin">
llSetRemoteScriptAccessPin(integer pin)
If pin is set to a non-zero number, allows a prim to have scripts remotely loaded via llRemoteLoadScriptPin when it passes in the correct pin. Otherwise, llRemoteLoadScriptPin is ignored.
  </string>
  <string name="LSLTipText_llRemoteLoadScriptPin">
llRemoteLoadScriptPin(key target, string name, integer pin, integer running, integer start_param)
Copies script name onto target, if the owner of this scripted object can modify target and is in the same region, and the matching pin is used.
If running == TRUE, starts the script with start_param
  </string>
  <string name="LSLTipText_llOpenRemoteDataChannel">
llOpenRemoteDataChannel()
Creates a channel to listen for XML-RPC calls, and will trigger a remote_data event with channel id once it is available
  </string>
  <string name="LSLTipText_llSendRemoteData">
key llSendRemoteData(key channel, string dest, integer idata, string sdata)
Sends an XML-RPC request to dest through channel with payload of channel (in a string), integer idata and string sdata.
Returns a key that is the message_id for the resulting remote_data events.
  </string>
  <string name="LSLTipText_llRemoteDataReply">
llRemoteDataReply(key channel, key message_id, string sdata, integer idata)
Sends an XML-RPC reply to message_id on channel with payload of string sdata and integer idata
  </string>
  <string name="LSLTipText_llCloseRemoteDataChannel">
llCloseRemoteDataChannel(key channel)
Closes XML-RPC channel
  </string>
  <string name="LSLTipText_llMD5String">
string llMD5String(string src, integer nonce)
Returns a string of 32 hex characters that is a RSA Data Security, Inc. MD5 Message-Digest Algorithm of src with nonce
  </string>
  <string name="LSLTipText_llSetPrimitiveParams">
llSetPrimitiveParams(list rules)
Sets the prim&apos;s parameters according to rules
  </string>
  <string name="LSLTipText_llStringToBase64">
string llStringToBase64(string str)
Converts a string to the Base64 representation of the string
  </string>
  <string name="LSLTipText_llBase64ToString">
string llBase64ToString(string str)
Converts a Base64 string to a conventional string.
If the conversion creates any unprintable characters, they are converted to spaces.
  </string>
  <string name="LSLTipText_llXorBase64Strings">
string llXorBase64Strings(string s1, string s2)
DEPRECATED!  Please use llXorBase64StringsCorrect instead.
Incorrectly performs an exclusive or on two Base64 strings and returns a Base64 string.  s2 repeats if it is shorter than s1.  Retained for backwards compatability.
  </string>
  <string name="LSLTipText_llRemoteDataSetRegion">
llRemoteDataSetRegion()
DEPRECATED!  Please use llOpenRemoteDataChannel instead.
If an object using remote data channels changes regions, you must call this function to reregister the remote data channels. This call is not needed if the prim does not change regions.
  </string>
  <string name="LSLTipText_llLog10">
float llLog10(float val)
Returns the base 10 logarithm of val.  Returns zero if val &lt;= 0.
  </string>
  <string name="LSLTipText_llLog">
float llLog(float val)
Returns the natural logarithm of val.  Returns zero if val &lt;= 0.
  </string>
  <string name="LSLTipText_llGetAnimationList">
list llGetAnimationList(key id)
Returns a list of keys of playing animations for avatar described by id
  </string>
  <string name="LSLTipText_llSetParcelMusicURL">
llSetParcelMusicURL(string url)
Sets the streaming audio URL for the parcel which the object is on
  </string>
  <string name="LSLTipText_llGetRootPosition">
vector llGetRootPosition()
Returns the position (in region coordinates) of the root prim of the object which the script is attached to
  </string>
  <string name="LSLTipText_llGetRootRotation">
rotation llGetRootRotation()
Returns the rotation (relative to the region) of the root prim of the object which the script is attached to
  </string>
  <string name="LSLTipText_llGetObjectDesc">
string llGetObjectDesc()
Returns the description of the prim the script is attached to
  </string>
  <string name="LSLTipText_llSetObjectDesc">
llSetObjectDesc(string name)
Sets the prim&apos;s description
  </string>
  <string name="LSLTipText_llGetCreator">
key llGetCreator()
Returns a key for the creator of the prim
  </string>
  <string name="LSLTipText_llGetTimestamp">
string llGetTimestamp()
Returns the timestamp in the UTC time zone in the format: YYYY-MM-DDThh:mm:ss.ff..fZ
  </string>
  <string name="LSLTipText_llSetLinkAlpha">
llSetLinkAlpha(integer linknumber, float alpha, integer face)
If a prim exists in the link chain at linknumber, sets face to alpha
  </string>
  <string name="LSLTipText_llGetNumberOfPrims">
integer llGetNumberOfPrims()
Returns the number of prims in a link set the script is attached to
  </string>
  <string name="LSLTipText_llGetNumberOfNotecardLines">
key llGetNumberOfNotecardLines(string name)
Returns number of lines in notecard name via the dataserver event (cast return value to integer)
  </string>
  <string name="LSLTipText_llGetBoundingBox">
list llGetBoundingBox(key object)
Returns the bounding box around the object (including any linked prims) relative to its root prim, in a list in the format [ (vector) min_corner, (vector) max_corner ]
  </string>
  <string name="LSLTipText_llGetGeometricCenter">
vector llGetGeometricCenter()
Returns the geometric center of the linked set the script is attached to.
  </string>
  <string name="LSLTipText_llGetPrimitiveParams">
list llGetPrimitiveParams(list params)
Returns the primitive parameters specified in the params list.
  </string>
  <string name="LSLTipText_llIntegerToBase64">
string llIntegerToBase64(integer number)
Returns a string that is a Base64 big endian encode of number
  </string>
  <string name="LSLTipText_llBase64ToInteger">
integer llBase64ToInteger(string str)
Returns an integer that is the str Base64 decoded as a big endian integer
  </string>
  <string name="LSLTipText_llGetGMTclock">
float llGetGMTclock()
Returns the time in seconds since midnight GMT
  </string>
  <string name="LSLTipText_llGetSimulatorHostname">
string llGetSimulatorHostname()
Returns the hostname of the machine which the script is running on (same as string in viewer Help dialog)
  </string>
  <string name="LSLTipText_llSetLocalRot">
llSetLocalRot(rotation rot)
Sets the rotation of a child prim relative to the root prim
  </string>
  <string name="LSLTipText_llParseStringKeepNulls">
list llParseStringKeepNulls(string src, list separators, list spacers)
Breaks src into a list, discarding separators, keeping spacers, keeping any null values generated.
(separators and spacers must be lists of strings, maximum of 8 each)
  </string>
  <string name="LSLTipText_llRezAtRoot">
llRezAtRoot(string inventory, vector pos, vector vel, rotation rot, integer param)
Instantiates owner&apos;s inventory object rotated to rot with its root at pos, moving at vel, using param as the start parameter
  </string>
  <string name="LSLTipText_llGetObjectPermMask">
integer llGetObjectPermMask(integer mask)
Returns the requested permission mask for the root object the task is attached to
  </string>
  <string name="LSLTipText_llSetObjectPermMask">
llSetObjectPermMask(integer mask, integer value)
Sets the given permission mask to the new value on the root object the task is attached to (requires God Mode)
  </string>
  <string name="LSLTipText_llGetInventoryPermMask">
integer llGetInventoryPermMask(string item, integer mask)
Returns the requested permission mask for the inventory item
  </string>
  <string name="LSLTipText_llSetInventoryPermMask">
llSetInventoryPermMask(string item, integer mask, integer value)
Sets the given permission mask to the new value on the inventory item (requires God Mode)
  </string>
  <string name="LSLTipText_llGetInventoryCreator">
key llGetInventoryCreator(string item)
Returns a key for the creator of the inventory item
  </string>
  <string name="LSLTipText_llOwnerSay">
llOwnerSay(string msg)
Says msg to owner only.  (Owner must be in the same region.)
  </string>
  <string name="LSLTipText_llRequestSimulatorData">
key llRequestSimulatorData(string simulator, integer data)
Requests data about simulator.  When data is available the dataserver event will be raised.
  </string>
  <string name="LSLTipText_llForceMouselook">
llForceMouselook(integer mouselook)
If mouselook is TRUE, any avatar that sits upon the prim will be forced into mouselook mode
  </string>
  <string name="LSLTipText_llGetObjectMass">
float llGetObjectMass(key id)
Returns the mass of the avatar or object in the region
  </string>
  <string name="LSLTipText_llListReplaceList">
list llListReplaceList(list dest, list src, integer start, integer end)
Returns a list that is dest with start through end removed and src inserted at start
  </string>
  <string name="LSLTipText_llLoadURL">
llLoadURL(key avatar, string message, string url)
Shows a dialog to avatar offering to load the web page at url with a message.
If user clicks yes, launches the page in their web browser.
  </string>
  <string name="LSLTipText_llParcelMediaCommandList">
llParcelMediaCommandList(list command)
Sends a list of commands, some with arguments, to a parcel to control the playback of movies and other media
  </string>
  <string name="LSLTipText_llParcelMediaQuery">
list llParcelMediaQuery(list query)
Returns a list containing results of the sent query
  </string>
  <string name="LSLTipText_llModPow">
integer llModPow(integer a, integer b, integer c)
Returns a raised to the b power, mod c. ( (a**b)%c )
b is capped at 0xFFFF (16 bits).
  </string>
  <string name="LSLTipText_llGetInventoryType">
integer llGetInventoryType(string name)
Returns the type of the inventory item name
  </string>
  <string name="LSLTipText_llSetPayPrice">
llSetPayPrice(integer price, list quick_pay_buttons)
Sets the default amount on the dialog that appears when someone chooses to pay this prim
  </string>
  <string name="LSLTipText_llGetCameraPos">
vector llGetCameraPos()
Returns the current camera position for the agent the task has permissions for
  </string>
  <string name="LSLTipText_llGetCameraRot">
rotation llGetCameraRot()
Returns the current camera orientation for the agent the task has permissions for
  </string>
  <string name="LSLTipText_llSetPrimURL">
llSetPrimURL(string url)
Updates the URL for the web page shown on the sides of the object
  </string>
  <string name="LSLTipText_llRefreshPrimURL">
llRefreshPrimURL()
Reloads the web page shown on the sides of the object
  </string>
  <string name="LSLTipText_llEscapeURL">
string llEscapeURL(string url)
Returns an escaped/encoded version of url, replacing spaces with %20 etc.
  </string>
  <string name="LSLTipText_llUnescapeURL">
string llUnescapeURL(string url)
Returns an unescaped/ unencoded version of url, replacing %20 with spaces etc.
  </string>
  <string name="LSLTipText_llMapDestination">
llMapDestination(string simname, vector pos, vector look_at)
Opens the World Map centered on the region simname with pos highlighted. (NOTE: look_at currently does nothing.)
Only works for scripts attached to avatar, or during touch events.
  </string>
  <string name="LSLTipText_llAddToLandBanList">
llAddToLandBanList(key avatar, float hours)
Adds avatar to the land ban list for hours, or indefinitely if hours is 0
  </string>
  <string name="LSLTipText_llRemoveFromLandPassList">
llRemoveFromLandPassList(key avatar)
Removes avatar from the land pass list
  </string>
  <string name="LSLTipText_llRemoveFromLandBanList">
llRemoveFromLandBanList(key avatar)
Removes avatar from the land ban list
  </string>
  <string name="LSLTipText_llSetCameraParams">
llSetCameraParams(list rules)
Sets multiple camera parameters at once.
List format is [ rule1, data1, rule2, data2 . . . rulen, datan ]
  </string>
  <string name="LSLTipText_llClearCameraParams">
llClearCameraParams()
Resets all camera parameters to default values and turns off scripted camera control
  </string>
  <string name="LSLTipText_llListStatistics">
float llListStatistics(integer operation, list src)
Performs statistical aggregate functions on list src using LIST_STAT_* operations
  </string>
  <string name="LSLTipText_llGetUnixTime">
integer llGetUnixTime()
Returns the number of seconds elapsed since 00:00 hours, Jan 1, 1970 UTC from the system clock
  </string>
  <string name="LSLTipText_llGetParcelFlags">
integer llGetParcelFlags(vector pos)
Returns a mask of the parcel flags (PARCEL_FLAG_*) for the parcel that includes the point pos
  </string>
  <string name="LSLTipText_llGetRegionFlags">
integer llGetRegionFlags()
Returns the region flags (REGION_FLAG_*) for the region the object is in
  </string>
  <string name="LSLTipText_llXorBase64StringsCorrect">
string llXorBase64StringsCorrect(string s1, string s2)
Correctly performs an exclusive or on two Base64 strings and returns a Base64 string.
s2 repeats if it is shorter than s1.
  </string>
  <string name="LSLTipText_llHTTPRequest">
llHTTPRequest(string url, list parameters, string body)
Sends an HTTP request to the specified url with the body of the request and parameters
  </string>
  <string name="LSLTipText_llResetLandBanList">
llResetLandBanList()
Removes all residents from the land ban list
  </string>
  <string name="LSLTipText_llResetLandPassList">
llResetLandPassList()
Removes all residents from the land access/pass list
  </string>
  <string name="LSLTipText_llGetObjectPrimCount">
integer llGetObjectPrimCount(key object_id)
Returns the total number of prims for an object in the region
  </string>
  <string name="LSLTipText_llGetParcelPrimOwners">
list llGetParcelPrimOwners(vector pos)
Returns a list of all residents who own objects on the parcel at pos and with individual prim counts.
Requires owner-like permissions for the parcel.
  </string>
  <string name="LSLTipText_llGetParcelPrimCount">
integer llGetParcelPrimCount(vector pos, integer category, integer sim_wide)
Returns the number of prims on the parcel at pos of the given category.
Categories: PARCEL_COUNT_TOTAL, _OWNER, _GROUP, _OTHER, _SELECTED, _TEMP
  </string>
  <string name="LSLTipText_llGetParcelMaxPrims">
integer llGetParcelMaxPrims(vector pos, integer sim_wide)
Returns the maximum number of prims allowed on the parcel at pos
  </string>
  <string name="LSLTipText_llGetParcelDetails">
list llGetParcelDetails(vector pos, list params)
Returns the parcel details specified in params for the parcel at pos.
Params is one or more of: PARCEL_DETAILS_NAME, _DESC, _OWNER, _GROUP, _AREA
  </string>
  <string name="LSLTipText_llSetLinkPrimitiveParams">
llSetLinkPrimitiveParams(integer linknumber, list rules)
Sets primitive parameters for linknumber based on rules
  </string>
  <string name="LSLTipText_llSetLinkTexture">
llSetLinkTexture(integer linknumber, string texture, integer face)
Sets the texture of face for a task that exists in the link chain at linknumber
  </string>
  <string name="LSLTipText_llStringTrim">
string llStringTrim(string src, integer trim_type)
Trims the leading and/or trailing white spaces from a string.
trim_type can be STRING_TRIM, STRING_TRIM_HEAD or STRING_TRIM_TAIL.
  </string>
  <string name="LSLTipText_llRegionSay">
llRegionSay(integer channel, string msg)
Broadcasts msg on channel (not 0) that can be heard anywhere in the region by a script listening on channel
  </string>
  <string name="LSLTipText_llGetObjectDetails">
list llGetObjectDetails(key id, list params)
Returns the object details specified in params for the object with key id.
Params are OBJECT_NAME, _DESC, _POS, _ROT, _VELOCITY, _OWNER, _GROUP, _CREATOR
  </string>
  <string name="LSLTipText_llSetClickAction">
llSetClickAction(integer action)
Sets the action performed when a prim is clicked upon
  </string>
  <string name="LSLTipText_llGetRegionAgentCount">
integer llGetRegionAgentCount()
Returns the number of avatars in the region
  </string>
  <string name="LSLTipText_llTextBox">
llTextBox(key avatar, string message, integer chat_channel
Shows a dialog box on the avatar&apos;s screen with the message.
It contains a text box for input, and if entered that text is chatted on chat_channel.
  </string>
  <string name="LSLTipText_llGetAgentLanguage">
string llGetAgentLanguage(key avatar)
Returns the language code of the preferred interface language of the avatar
  </string>
  <string name="LSLTipText_llDetectedTouchUV">
vector llDetectedTouchUV(integer index)
Returns the u and v coordinates in the first two components of a vector, for the texture coordinates where the prim was touched in a triggered touch event
  </string>
  <string name="LSLTipText_llDetectedTouchFace">
integer llDetectedTouchFace(integer index)
Returns the index of the face where the avatar clicked in a triggered touch event
  </string>
  <string name="LSLTipText_llDetectedTouchPos">
vector llDetectedTouchPos(integer index)
Returns the position where the object was touched in a triggered touch event
  </string>
  <string name="LSLTipText_llDetectedTouchNormal">
vector llDetectedTouchNormal(integer index)
Returns the surface normal for a triggered touch event
  </string>
  <string name="LSLTipText_llDetectedTouchBinormal">
vector llDetectedTouchBinormal(integer index)
Returns the surface binormal for a triggered touch event
  </string>
  <string name="LSLTipText_llDetectedTouchST">
vector llDetectedTouchST(integer index)
Returns the s and t coordinates in the first two components of a vector, for the surface coordinates where the prim was touched in a triggered touch event
  </string>
  <string name="LSLTipText_llSHA1String">
string llSHA1String(string src)
Returns a string of 40 hex characters that is the SHA1 security Hash of src
  </string>
  <string name="LSLTipText_llGetFreeURLs">
integer llGetFreeURLs()
Returns the number of available URLs for the current script
  </string>
  <string name="LSLTipText_llRequestURL">
key llRequestURL()
Requests one HTTP:// url for use by this object.
An http_request event is triggered with the results.
  </string>
  <string name="LSLTipText_llRequestSecureURL">
key llRequestSecureURL()
Requests one HTTPS:// (SSL) url for use by this object.
An http_request event is triggered with the results.
  </string>
  <string name="LSLTipText_llReleaseURL">
llReleaseURL(string url)
Releases the specified URL, it will no longer be usable
  </string>
  <string name="LSLTipText_llHTTPResponse">
llHTTPResponse(key request_id, integer status, string body)
Responds to request_id with status and body
  </string>
  <string name="LSLTipText_llGetHTTPHeader">
string llGetHTTPHeader(key request_id, string header)
Returns the value for header for request_id
  </string>
  <string name="LSLTipText_llSetPrimMediaParams">
integer llSetPrimMediaParams(integer face, list params)
Returns an integer that is a STATUS_* flag which details the success/failure of the operation(s).
  </string>
  <string name="LSLTipText_llGetPrimMediaParams">
    list llGetPrimMediaParams(integer face, list params)
Returns the media params for a particular face on an object, given the desired list of names, in the order requested.
(Returns an empty list if no media exists on the face.)
  </string>
  <string name="LSLTipText_llClearPrimMedia">
integer llClearPrimMedia(integer face)
Returns an integer that is a STATUS_* flag which details the success/failure of the operation.
  </string>
  <string name="LSLTipText_llSetLinkPrimitiveParamsFast">
llSetLinkPrimitiveParamsFast(integer linknumber, list rules)
Set primitive parameters for linknumber based on rules with no built-in script sleep.
  </string>
  <string name="LSLTipText_llGetLinkPrimitiveParams">
list llGetLinkPrimitiveParams(integer linknumber,list rules)
Get primitive parameters for linknumber based on rules.
  </string>
  <string name="LSLTipText_llLinkParticleSystem">
list llLinkParticleSystem(integer linknumber, list rules)
Creates a particle system based on rules.  Empty list removes particle system from object.
List format is [ rule1, data1, rule2, data2 . . . rulen, datan ].
  </string>
  <string name="LSLTipText_llSetLinkTextureAnim">
llSetLinkTextureAnim(integer link, integer mode, integer face, integer sizex, integer sizey, float start, float length, float rate)
Animate the texture on the specified face/faces of the specified prim/prims by setting the texture scale and offset.
  </string>
  <string name="LSLTipText_llGetLinkNumberOfSides">
integer llGetLinkNumberOfSides(integer link)
Returns the number of sides of the specified linked prim.
  </string>
  <string name="LSLTipText_llGetUsername">
string llGetUsername(key id)
Returns the single-word username of an avatar, if the avatar is in the current region, otherwise the empty string.
  </string>
  <string name="LSLTipText_llRequestUsername">
key llRequestUsername(key id)
Requests single-word username of an avatar.  When data is available the dataserver event will be raised.
  </string>
  <string name="LSLTipText_llGetDisplayName">
string llGetDisplayName(key id)
Returns the name of an avatar, if the avatar is in the current simulator, and the name has been cached, otherwise the same as llGetUsername. Use llRequestDisplayName if you absolutely must have the display name.
  </string>
  <string name="LSLTipText_llRequestDisplayName">
key llRequestDisplayName(key id)
Requests name of an avatar.  When data is available the dataserver event will be raised.
  </string>
  <string name="LSLTipText_llRegionSayTo">
llRegionSayTo(key target, integer channel, string msg)
Sends msg on channel (not DEBUG_CHANNEL) directly to prim or avatar target anywhere within the region
  </string>
  <string name="LSLTipText_llGetEnv">
string llGetEnv(string name)
Returns a string with the requested data about the region
  </string>


  <string name="LSLTipText_llCastRay">
list llCastRay( Vector start, Vector end, list options )
Returns a list consisting of the following three values for each hit: UUID, Link number, Hit position.
  </string>
  <string name="LSLTipText_llGetSPMaxMemory">
integer llGetSPMaxMemory( )
Returns the integer of the most bytes used while llScriptProfiler was last active.
  </string>
  <string name="LSLTipText_llGetUsedMemory">
integer llGetUsedMemory( )
Returns the integer of the number of bytes of memory currently in use by the script.
  </string>
  <string name="LSLTipText_llGodLikeRezObject">
llGodLikeRezObject( key inventory, vector pos )
Rez directly off of UUID if owner has god-bit set.
(Requires god mode)
  </string>
  <string name="LSLTipText_llScriptProfiler">
llScriptProfiler( integer flags )
Enables or disables the scripts profiling state.
  </string>
  <string name="LSLTipText_llSetInventoryPermMask">
llSetInventoryPermMask( string item, integer mask, integer value )
Sets the given permission mask to the new value on the inventory item.
(Requires god mode)
  </string>
  <string name="LSLTipText_llSetObjectPermMask">
llSetObjectPermMask( integer mask, integer value )
Sets the given permission mask to the new value on the root object the task is attached to.
(Requires god mode)
  </string>
  <string name="LSLTipText_llSetMemoryLimit">
integer llSetMemoryLimit( integer limit )
Request ''limit'' bytes to be reserved for this script.
  </string>
  <string name="LSLTipText_llSetLinkMedia">
integer llSetLinkMedia( integer link, integer face, list params )
Set the media params for a particular face on the linked prim(s) without a delay.
  </string>
  <string name="LSLTipText_llGetLinkMedia">
list llGetLinkMedia( integer link, integer face, list params )
Returns a list with the media params for a particular face on a linked prim, given the desired list of named params.
  </string>
  <string name="LSLTipText_llClearLinkMedia">
integer llClearLinkMedia( integer link, integer face )
Clears the media and all params from the given face on the linked prim(s).
  </string>
  <string name="LSLTipText_llSetLinkCamera">
llSetLinkCamera( integer link, vector eye, vector at )
Sets the camera eye offset, and the offset that the camera is looking at, for avatars that sit on the linked prim.
  </string>
  <string name="LSLTipText_llSetContentType">
llSetContentType( key request_id, integer content_type )
Set the Internet media type of an LSL HTTP server response.
  </string>
  <string name="LSLTipText_llLinkSitTarget">
llLinkSitTarget( integer link, vector offset, rotation rot );
Set the sit location for the linked prim(s). The sit location is relative to the prim's position and rotation.
  </string>
  <string name="LSLTipText_llAvatarOnLinkSitTarget">
key llAvatarOnLinkSitTarget( integer link )
Returns a key that is the UUID of the user seated on the prim.
  </string>

<!-- No info on these functions yet....
  <string name="LSLTipText_llSetVelocity">
  </string>
  <string name="LSLTipText_llSetRotationalVelocity">
  </string>
-->

	<!-- Strings needed by drop targets -->
	<string name="CurrentlyNotSet">No definido actualmente </string>
	<string name="CurrentlySetTo">Actualmente definido a: [ITEM]</string>
	<string name="CurrentlySetToAnItemNotOnThisAccount">Actualmente definido a un artículo no está en esta cuenta</string>
	<string name="NotLoggedIn">Desconectado</string>

	<!-- Avatar busy/away mode -->
	<string name="AvatarSetNotAway">No ausente</string>
	<string name="AvatarSetAway">Ausente</string>
	<string name="AvatarSetNotBusy">No Ocupado</string>
	<string name="AvatarSetBusy">Ocupado</string>
	<string name="ok">OK</string>

	<!-- LLGroupNotify -->
	<!-- used in the construction of a Group Notice blue dialog box, buttons, tooltip etc. Seems to be no longer utilized by code in Viewer 2.0 -->
	<string name="next">Siguiente</string>
	<string name="ok">OK</string>
	<string name="GroupNotifyGroupNotice">Aviso de Grupo</string>
	<string name="GroupNotifyGroupNotices">Avisos de Grupo</string>
	<string name="GroupNotifySentBy">Enviado por</string>
	<string name="GroupNotifyAttached">Anexado:</string>
	<string name="GroupNotifyViewPastNotices">Ver noticias anteriores o bien optar por no recibir estos mensajes aquí.</string>
	<string name="GroupNotifyOpenAttachment">Abrir Adjunto</string>
	<string name="GroupNotifySaveAttachment">Guardar Adjunto</string>

	<!-- body parts -->
	<string name="BodyPartsRightArm">Brazo Derecho</string>
	<string name="BodyPartsHead">Cabeza</string>
	<string name="BodyPartsLeftArm">Brazo Izquierdo</string>
	<string name="BodyPartsLeftLeg">Pierna Izqquierda</string>
	<string name="BodyPartsTorso">Torso</string>
	<string name="BodyPartsRightLeg">Pierna Derecha</string>

	<!-- mouselook -->
	<string name="LeaveMouselook">Pulsa ESC para regresar a la vista del mundo</string>

	<!-- inventory -->
	<string name="InventoryNoMatchingItems">Elementos no hallados en el inventario.</string>

	<!-- use value="" because they have preceding spaces -->
	<string name="no_transfer" value=" (no transferible)" />
	<string name="no_modify"   value=" (no modificable)" />
	<string name="no_copy"     value=" (no copiable)" />
	<string name="temporary"   value=" (temporal)" />
	<string name="worn"        value=" (vestido)" />
	<string name="locked" value=" (bloqueado)" />
	<string name="link"        value=" (enlace)" />
	<string name="broken_link" value=" (enlace roto)" />
	<string name="LoadingContents">Cargando contenidos...</string>
	<string name="NoContents">Sin Contenido</string>
	<string name="WornOnAttachmentPoint" value=" (vestido en [ATTACHMENT_POINT])" />
	<string name="LockedOnAttachmentPoint" value=" (bloqueado en[ATTACHMENT_POINT])" />
	<string name="ActiveGesture" value="[GESLABEL] (activo)"/>
	
	<!-- Gestures labels -->
    <!-- use value="" because they have preceding spaces -->
    <string name="Chat Message"  value=" Chat : " />
    <string name="Sound"         value=" Sonido : " />
	<string name="Wait"          value=" --- Esperar : " />
	<string name="AnimFlagStop"  value=" Detener Animación :    " />
	<string name="AnimFlagStart" value=" Iniciar Animación :   " />
	<string name="Wave"          value=" Onda " />
	<string name="GestureActionNone" value="Nada" />
	<string name="HelloAvatar"   value=" ¡Hola Avatar! " />
	<string name="ViewAllGestures"  value="  Ver Todo &gt;&gt;" />
	<string name="GetMoreGestures"  value="  Obtener Más &gt;&gt;" />

	<!-- inventory filter -->
    <!-- use value="" because they have preceding spaces -->
	<string name="Animations"    value=" Animaciones," />
	<string name="Calling Cards" value=" Tarjetas de Visita," />
	<string name="Clothing"      value=" Ropa," />
	<string name="Gestures"      value=" Gestos," />
	<string name="Landmarks"     value=" Hitos," />
	<string name="Notecards"     value=" Notas," />
	<string name="Objects"       value=" Objetos," />
	<string name="Scripts"       value=" Scripts," />
	<string name="Sounds"        value=" Sonidos," />
	<string name="Textures"      value=" Texturas," />
	<string name="Snapshots"     value=" Fotos," />
	<string name="No Filters"    value="No " />
	<string name="Since Logoff"  value=" - Desde Fin Sesión Anterior" />
	<string name="Worn"          value=" - Vestido" />

	<!-- inventory FVBridge -->
	<!--  This is used in llpanelinventory.cpp when constructing a context menu for an item for Sale  -->
	<string name="Buy">Comprar</string>
	
	<string name="Stone">Piedra</string>
	<string name="Metal">Metal</string>
	<string name="Glass">Vidrio</string>
	<string name="Wood">Madera</string>
	<string name="Flesh">Carne</string>
	<string name="Plastic">Plástico</string>
	<string name="Rubber">Goma</string>
	<string name="Light">Luz</string>
	<string name="Unknown">(Desconocido)</string>
	
	<!-- compile queue-->
	<string name="CompileQueueDownloadedCompiling">Descardado, compilando</string>
	<string name="CompileQueueScriptNotFound">El Script no ha sido hallado en el servidor.</string>
	<string name="CompileQueueProblemDownloading">Problema al descargar</string>
	<string name="CompileQueueInsufficientPermDownload">Permisos insuficientes para descargar un script.</string>
	<string name="CompileQueueInsufficientPermFor">Permisos insuficientes para</string>
	<string name="CompileQueueUnknownFailure">Fallo desconocido en la descarga</string>
	<string name="CompileQueueTitle">Progreso de Recompilación</string>
	<string name="CompileQueueStart">recompilar</string>
	<string name="ResetQueueTitle">Progeso de Reinicio</string>
	<string name="ResetQueueStart">reiniciar</string>
	<string name="RunQueueTitle">Definir ejecución en Progreso</string>
	<string name="RunQueueStart">Definir ejecutando</string>
	<string name="NotRunQueueTitle">Definir no ejecutando en progreso</string>
	<string name="NotRunQueueStart">Definir no ejecutando</string>

	<!-- compile comment text-->
	<string name="CompileSuccessful">¡Compilación satisfactoria!</string>
	<string name="CompileSuccessfulSaving">Compilación satisfactoria, guardando...</string>
	<string name="SaveComplete">Guardado completado.</string>
	<string name="ObjectOutOfRange">Script (objeto fuera de rango)</string>

	<string name="Unknown">(Desconocido)</string>	
	
	<!-- Environment settings -->
	<string name="Local">Local</string>
	<string name="LocalSettings">Configuración Local</string>
	<string name="Region">Región</string>
	<string name="RegionSettings">Configuración de Región</string>

	<!-- inventory offer -->
	<string name="InvOfferAnObjectNamed">Un objeto llamado</string>
	<string name="InvOfferOwnedByGroup">propiedad del grupo</string>
	<string name="InvOfferOwnedByUnknownGroup">propiedad de un grupo desconocido</string>
	<string name="InvOfferOwnedBy">propiedad de</string>
	<string name="InvOfferOwnedByUnknownUser">propiedad de un usuario desconocido</string>
	<string name="InvOfferGaveYou">te ha dado</string>
	<string name="InvOfferDecline">Has rechazado [DESC] de [NAME].</string>

	<!-- Viewer menu -->
	<string name="AcquiredItems">Ítems adquiridos</string>
	<string name="Cancel">Cancelar</string>
	<string name="UploadingCosts">Subiendo [NAME] a un costo de [CURRENCY] [AMOUNT]</string>
	<string name="UnknownFileExtension">
		Extensión de archivo %s deconocida.
Se espera .wav, .tga, .bmp, .jpg, .jpeg, o .bvh
	</string>
  <string name="MuteObject2">Ignorar</string>
  <string name="MuteAvatar">Ignorar</string>
  <string name="UnmuteObject">Dejar de Ignorar</string>
  <string name="UnmuteAvatar">Dejar de Ignorar</string>

	<!-- menu accelerators -->
	<string name="accel-mac-control">Ctrl-</string>
	<string name="accel-mac-command">Cmd-</string>
	<string name="accel-mac-option">Opt-</string>
	<string name="accel-mac-shift">Mayús</string>
	<string name="accel-win-control">Ctrl-</string>
	<string name="accel-win-alt">Alt-</string>
	<string name="accel-win-shift">Mayús</string>

	<!-- Previews -->
	<string name="FileSaved">Archivo Guardado</string>
	<string name="Receiving">Recibiendo</string>

	<!-- Directions, HUD -->
	<string name="Direction_Forward">Adelante</string>
	<string name="Direction_Left">Izquierda</string>
	<string name="Direction_Right">Derecha</string>
	<string name="Direction_Back">Atrás</string>
	<string name="Direction_North">Norte</string>
	<string name="Direction_South">Sur</string>
	<string name="Direction_West">Oeste</string>
	<string name="Direction_East">Este</string>
	<string name="Direction_Up">Arriba</string>
	<string name="Direction_Down">Abajo</string>

	<string name="None">Nada</string>

	<!-- punctuations -->
	<string name=":">:</string>
	<string name=",">,</string>
	<string name="...">...</string>
	<string name="***">***</string>
	<string name="(">(</string>
	<string name=")">)</string>
	<string name=".">.</string>
	<string name="'">'</string>
	<string name="---">---</string>


	<!-- OSMessageBox messages -->
	<string name="MBCmdLineError">
		Se ha encontrado un error analizando la línea de comandos-
Por favor, mira en: http://wiki.secondlife.com/wiki/Client_parameters
Error:
	</string>
	
	<string name="MBCmdLineUsg">
		[APP_NAME] Uso de la Línea de Comandos:
	</string>
	
	<string name="MBUnableToAccessFile">
		[APP_NAME] es incapaz de acceder a un archivo que necesita.

Esto puede ser porque de alguna manera tienes varias copias en ejecución, o tu sistema de forma incorrecta piensa que un archivo está abierto.
Si este mensaje persiste, reinicia el equipo y vuelve a intentarlo.
Si persiste, puede que tengas que desinstalar completamente [APP_NAME] y volver a instalarlo.
	</string>
	
	<string name="MBRequiresAltiVec">
		[APP_NAME] requiere un procesador con AltiVec (G4 o posterior).
	</string>
	
	<string name="MBAlreadyRunning">
		[APP_NAME] ya está siendo ejecutado.
Revisa tu barra de tareas y busca copia minimizada del programa.
Si este mensaje persiste, reinicia tu equipo.
	</string>
	
	<string name="MBFrozenCrashed">
		[APP_NAME] parece haberse congelado o sufrido un fallo en la ejecución anterior.
¿Quieres enviar un reporte de fallos?
	</string>
	
	<string name="MBAlert">Notificación</string>
	
	<string name="MBNoDirectX">
		[APP_NAME] es incapaz de detectar DirectX 9.0b o superior.
[APP_NAME] usa DirecX para detectar el hardware y/o los controladores desactualizados que pueden causar inestabilidad, pobre rendmiento y caídas. Si bien puedes ejecutar [APP_NAME] sin esto, recomendamos encarecidamente ejecutarlo con DirectX 9.0b.

¿Quieres continuar?
	</string>
	
	<string name="MBWarning">Atención</string>
	
	<string name="MBRegClassFailed">Fallo de RegisterClass</string>
	
	<string name="MBError">Error</string>
	
	<string name="MBFullScreenErr">
		Incapaz de ejecutar a pantalla completa en [WIDTH] x [HEIGHT].
Ejecutando en ventana.
	</string>
	
	<string name="MBDestroyWinFailed">Error de cierre mientras se destruía la ventana (falló DestroyWindow())</string>
	
	<string name="MBShutdownErr">Error de Cierre</string>
	
	<string name="MBDevContextErr">Imposible crear el contexto de dispositivo GL</string>
	
	<string name="MBPixelFmtErr">
		No se puede encontrar el formato de píxel adecuado
	</string>
	
	<string name="MBPixelFmtDescErr">
		No se puede ver la descripción del formato de píxel	
	</string>
	
	<string name="MBTrueColorWindow">
		[APP_NAME] requiere True Color (32-bit) para ser ejecutado.
Por favor, ve a la configuración de pantalla de tu equipo y configura el modo de color en 32-bit.
	</string>
	
	<string name="MBAlpha">
		[APP_NAME] es incapaz de ejecutarse porque no puede obtener un canal alfa de 8 bit.  Usualmente esto ocurre debido a problemas con la tarjeta gráfica.
Por favor, asegurate que tienes actualizados los controladores de tu tarjeta gráfica.
Además, asegurate que tu pantalla esta definida en Color Verdadero (32-bit) En el Panel de Control &gt; Pantalla &gt; Configuraciones.

Si continuas recibiendo este mensaje, contacta con [SUPPORT_SITE].
	</string>
	
	<string name="MBPixelFmtSetErr">
		No se puede establecer el formato de píxel
	</string>
	
	<string name="MBGLContextErr">
		No se puede crear el contexto de renderizado GL
	</string>
	
	<string name="MBGLContextActErr">
		No se puede activar contexto de renderizado GL
	</string>
	
	<string name="MBVideoDrvErr">
		[APP_NAME] es incapaz de ejecutarse porque tu tarjeta gráfica no está instalada correctamente, es obsoleta o no está soportada. Por favor, asegurate que tienes actualizados los controladores de tu tarjeta gráfica, incluso, si están actualizados, intenta reinstalarlos..

Si continuas recibiendo este mensaje, contacta con [SUPPORT_SITE].
	</string>

	<!-- Avatar Shape Information -->
	<string name="5 O'Clock Shadow">Sombreado de las 5 en Punto</string>

	<string name="All White">Todo Blanco</string>
	<string name="Anime Eyes">Ojos de Animé</string>
	<string name="Arced">Arqueado</string>
	<string name="Arm Length">Largo de Brazo</string>
	<string name="Attached">Anexado</string>
	<string name="Attached Earlobes">Anexado a lóbulos de las orejas</string>

	<string name="Back Fringe">Flequillo</string>

	<string name="Baggy">Holgado</string>
	<string name="Bangs">Flecos</string>

	<string name="Beady Eyes">Ojos Pequeños y Brillantes</string>
	<string name="Belly Size">Tamaño del Vientre</string>
	<string name="Big">Grande</string>
	<string name="Big Butt">Cola Grande</string>

	<string name="Big Hair Back">Pelo grande: Atrás</string>
	<string name="Big Hair Front">Pelo Grande: Frente</string>
	<string name="Big Hair Top">Pelo Grande: Arriba</string>
	<string name="Big Head">Cabeza Grande</string>
	<string name="Big Pectorals">Pectorales Grandes</string>
	<string name="Big Spikes">Picos Grandes</string>
	<string name="Black">Negro</string>
	<string name="Blonde">Rubio</string>
	<string name="Blonde Hair">Pelo Rubio</string>
	<string name="Blush">Rubor</string>
	<string name="Blush Color">Color del Rubor</string>
	<string name="Blush Opacity">Opacidad del Rubor</string>
	<string name="Body Definition">Body Definition</string>
	<string name="Body Fat">Gordura</string>
	<string name="Body Freckles">Pecas del Cuerpo</string>
	<string name="Body Thick">Grosor del Cuerpo</string>
	<string name="Body Thickness">Body Thickness</string>
	<string name="Body Thin">Body Thin</string>

<string name="Bow Legged">Bow Legged</string>
<string name="Breast Buoyancy">Breast Buoyancy</string>
<string name="Breast Cleavage">Breast Cleavage</string>
<string name="Breast Size">Breast Size</string>
<string name="Bridge Width">Bridge Width</string>
<string name="Broad">Broad</string>
<string name="Brow Size">Brow Size</string>
<string name="Bug Eyes">Bug Eyes</string>
<string name="Bugged Eyes">Bugged Eyes</string>
<string name="Bulbous">Bulbous</string>
<string name="Bulbous Nose">Bulbous Nose</string>

<string name="Breast Physics Mass">Breast Mass</string>
<string name="Breast Physics Smoothing">Breast Smoothing</string>
<string name="Breast Physics Gravity">Breast Gravity</string>
<string name="Breast Physics Drag">Breast Drag</string>

<string name="Breast Physics InOut Max Effect">Max Effect</string>
<string name="Breast Physics InOut Spring">Spring</string>
<string name="Breast Physics InOut Gain">Gain</string>
<string name="Breast Physics InOut Damping">Damping</string>

<string name="Breast Physics UpDown Max Effect">Max Effect</string>
<string name="Breast Physics UpDown Spring">Spring</string>
<string name="Breast Physics UpDown Gain">Gain</string>
<string name="Breast Physics UpDown Damping">Damping</string>

<string name="Breast Physics LeftRight Max Effect">Max Effect</string>
<string name="Breast Physics LeftRight Spring">Spring</string>
<string name="Breast Physics LeftRight Gain">Gain</string>
<string name="Breast Physics LeftRight Damping">Damping</string>

<string name="Belly Physics Mass">Belly Mass</string>
<string name="Belly Physics Smoothing">Belly Smoothing</string>
<string name="Belly Physics Gravity">Belly Gravity</string>
<string name="Belly Physics Drag">Belly Drag</string>

<string name="Belly Physics UpDown Max Effect">Max Effect</string>
<string name="Belly Physics UpDown Spring">Spring</string>
<string name="Belly Physics UpDown Gain">Gain</string>
<string name="Belly Physics UpDown Damping">Damping</string>

<string name="Butt Physics Mass">Butt Mass</string>
<string name="Butt Physics Smoothing">Butt Smoothing</string>
<string name="Butt Physics Gravity">Butt Gravity</string>
<string name="Butt Physics Drag">Butt Drag</string>

<string name="Butt Physics UpDown Max Effect">Max Effect</string>
<string name="Butt Physics UpDown Spring">Spring</string>
<string name="Butt Physics UpDown Gain">Gain</string>
<string name="Butt Physics UpDown Damping">Damping</string>

<string name="Butt Physics LeftRight Max Effect">Max Effect</string>
<string name="Butt Physics LeftRight Spring">Spring</string>
<string name="Butt Physics LeftRight Gain">Gain</string>
<string name="Butt Physics LeftRight Damping">Damping</string>

<string name="Bushy Eyebrows">Bushy Eyebrows</string>
<string name="Bushy Hair">Bushy Hair</string>
<string name="Butt Size">Butt Size</string>
<string name="Butt Gravity">Butt Gravity</string>
<string name="bustle skirt">Bustle Skirt</string>
<string name="no bustle">No Bustle</string>
<string name="more bustle">More Bustle</string>

<string name="Chaplin">Chaplin</string>
<string name="Cheek Bones">Cheek Bones</string>
<string name="Chest Size">Chest Size</string>
<string name="Chin Angle">Chin Angle</string>
<string name="Chin Cleft">Chin Cleft</string>
<string name="Chin Curtains">Chin Curtains</string>

<string name="Chin Depth">Chin Depth</string>
<string name="Chin Heavy">Chin Heavy</string>
<string name="Chin In">Chin In</string>
<string name="Chin Out">Chin Out</string>
<string name="Chin-Neck">Chin-Neck</string>
<string name="Clear">Clear</string>
<string name="Cleft">Cleft</string>
<string name="Close Set Eyes">Close Set Eyes</string>
<string name="Closed">Closed</string>
<string name="Closed Back">Closed Back</string>
<string name="Closed Front">Closed Front</string>
<string name="Closed Left">Closed Left</string>
<string name="Closed Right">Closed Right</string>
<string name="Coin Purse">Coin Purse</string>
<string name="Collar Back">Collar Back</string>



<string name="Collar Front">Collar Front</string>



<string name="Corner Down">Corner Down</string>

<string name="Corner Up">Corner Up</string>
<string name="Creased">Creased</string>
<string name="Crooked Nose">Crooked Nose</string>

<string name="Cuff Flare">Cuff Flare</string>
<string name="Dark">Dark</string>
<string name="Dark Green">Dark Green</string>
<string name="Darker">Darker</string>
<string name="Deep">Deep</string>
<string name="Default Heels">Default Heels</string>

<string name="Dense">Dense</string>

<string name="Double Chin">Double Chin</string>
<string name="Downturned">Downturned</string>
<string name="Duffle Bag">Duffle Bag</string>
<string name="Ear Angle">Ear Angle</string>
<string name="Ear Size">Ear Size</string>
<string name="Ear Tips">Ear Tips</string>
<string name="Egg Head">Egg Head</string>
<string name="Eye Bags">Eye Bags</string>
<string name="Eye Color">Eye Color</string>
<string name="Eye Depth">Eye Depth</string>
<string name="Eye Lightness">Eye Lightness</string>
<string name="Eye Opening">Eye Opening</string>
<string name="Eye Pop">Eye Pop</string>
<string name="Eye Size">Eye Size</string>
<string name="Eye Spacing">Eye Spacing</string>

<string name="Eyebrow Arc">Eyebrow Arc</string>
<string name="Eyebrow Density">Eyebrow Density</string>

<string name="Eyebrow Height">Eyebrow Height</string>
<string name="Eyebrow Points">Eyebrow Points</string>
<string name="Eyebrow Size">Eyebrow Size</string>

<string name="Eyelash Length">Eyelash Length</string>
<string name="Eyeliner">Eyeliner</string>
<string name="Eyeliner Color">Eyeliner Color</string>

<string name="Eyes Bugged">Eyes Bugged</string>








<string name="Face Shear">Face Shear</string>
<string name="Facial Definition">Facial Definition</string>
<string name="Far Set Eyes">Far Set Eyes</string>

<string name="Fat Lips">Fat Lips</string>

<string name="Female">Female</string>
<string name="Fingerless">Fingerless</string>
<string name="Fingers">Fingers</string>
<string name="Flared Cuffs">Flared Cuffs</string>
<string name="Flat">Flat</string>
<string name="Flat Butt">Flat Butt</string>
<string name="Flat Head">Flat Head</string>
<string name="Flat Toe">Flat Toe</string>
<string name="Foot Size">Foot Size</string>
<string name="Forehead Angle">Forehead Angle</string>
<string name="Forehead Heavy">Forehead Heavy</string>
<string name="Freckles">Freckles</string>

<string name="Front Fringe">Front Fringe</string>

<string name="Full Back">Full Back</string>
<string name="Full Eyeliner">Full Eyeliner</string>
<string name="Full Front">Full Front</string>
<string name="Full Hair Sides">Full Hair Sides</string>
<string name="Full Sides">Full Sides</string>
<string name="Glossy">Glossy</string>
<string name="Glove Fingers">Glove Fingers</string>

<string name="Glove Length">Glove Length</string>


<string name="Hair">Hair</string>
<string name="Hair Back">Hair: Back</string>
<string name="Hair Front">Hair: Front</string>
<string name="Hair Sides">Hair: Sides</string>
<string name="Hair Sweep">Hair Sweep</string>
<string name="Hair Thickess">Hair Thickness</string>
<string name="Hair Thickness">Hair Thickness</string>
<string name="Hair Tilt">Hair Tilt</string>
<string name="Hair Tilted Left">Hair Tilted Left</string>
<string name="Hair Tilted Right">Hair Tilted Right</string>
<string name="Hair Volume">Hair: Volume</string>
<string name="Hand Size">Hand Size</string>
<string name="Handlebars">Handlebars</string>
<string name="Head Length">Head Length</string>
<string name="Head Shape">Head Shape</string>
<string name="Head Size">Head Size</string>
<string name="Head Stretch">Head Stretch</string>
<string name="Heel Height">Heel Height</string>
<string name="Heel Shape">Heel Shape</string>
<string name="Height">Height</string>
<string name="High">High</string>
<string name="High Heels">High Heels</string>
<string name="High Jaw">High Jaw</string>
<string name="High Platforms">High Platforms</string>
<string name="High and Tight">High and Tight</string>
<string name="Higher">Higher</string>
<string name="Hip Length">Hip Length</string>
<string name="Hip Width">Hip Width</string>
<string name="In">In</string>
<string name="In Shdw Color">Inner Shadow Color</string>
<string name="In Shdw Opacity">Inner Shadow Opacity</string>
<string name="Inner Eye Corner">Inner Eye Corner</string>
<string name="Inner Eye Shadow">Inner Eye Shadow</string>
<string name="Inner Shadow">Inner Shadow</string>


<string name="Jacket Length">Jacket Length</string>

<string name="Jacket Wrinkles">Jacket Wrinkles</string>
<string name="Jaw Angle">Jaw Angle</string>
<string name="Jaw Jut">Jaw Jut</string>
<string name="Jaw Shape">Jaw Shape</string>
<string name="Join">Join</string>
<string name="Jowls">Jowls</string>
<string name="Knee Angle">Knee Angle</string>
<string name="Knock Kneed">Knock Kneed</string>

<string name="Large">Large</string>
<string name="Large Hands">Large Hands</string>
<string name="Left Part">Left Part</string>
<string name="Leg Length">Leg Length</string>
<string name="Leg Muscles">Leg Muscles</string>
<string name="Less">Less</string>
<string name="Less Body Fat">Less Body Fat</string>
<string name="Less Curtains">Less Curtains</string>
<string name="Less Freckles">Less Freckles</string>
<string name="Less Full">Less Full</string>
<string name="Less Gravity">Less Gravity</string>
<string name="Less Love">Less Love</string>
<string name="Less Muscles">Less Muscles</string>
<string name="Less Muscular">Less Muscular</string>
<string name="Less Rosy">Less Rosy</string>
<string name="Less Round">Less Round</string>
<string name="Less Saddle">Less Saddle</string>
<string name="Less Square">Less Square</string>
<string name="Less Volume">Less Volume</string>
<string name="Less soul">Less soul</string>
<string name="Lighter">Lighter</string>
<string name="Lip Cleft">Lip Cleft</string>
<string name="Lip Cleft Depth">Lip Cleft Depth</string>
<string name="Lip Fullness">Lip Fullness</string>
<string name="Lip Pinkness">Lip Pinkness</string>
<string name="Lip Ratio">Lip Ratio</string>
<string name="Lip Thickness">Lip Thickness</string>
<string name="Lip Width">Lip Width</string>
<string name="Lipgloss">Lipgloss</string>
<string name="Lipstick">Lipstick</string>
<string name="Lipstick Color">Lipstick Color</string>
<string name="Long">Long</string>
<string name="Long Head">Long Head</string>
<string name="Long Hips">Long Hips</string>
<string name="Long Legs">Long Legs</string>
<string name="Long Neck">Long Neck</string>
<string name="Long Pigtails">Long Pigtails</string>
<string name="Long Ponytail">Long Ponytail</string>
<string name="Long Torso">Long Torso</string>
<string name="Long arms">Long arms</string>


<string name="Loose Pants">Loose Pants</string>
<string name="Loose Shirt">Loose Shirt</string>
<string name="Loose Sleeves">Loose Sleeves</string>

<string name="Love Handles">Love Handles</string>
<string name="Low">Low</string>
<string name="Low Heels">Low Heels</string>
<string name="Low Jaw">Low Jaw</string>
<string name="Low Platforms">Low Platforms</string>
<string name="Low and Loose">Low and Loose</string>
<string name="Lower">Lower</string>
<string name="Lower Bridge">Lower Bridge</string>
<string name="Lower Cheeks">Lower Cheeks</string>

<string name="Male">Male</string>
<string name="Middle Part">Middle Part</string>
<string name="More">More</string>
<string name="More Blush">More Blush</string>
<string name="More Body Fat">More Body Fat</string>
<string name="More Curtains">More Curtains</string>
<string name="More Eyeshadow">More Eyeshadow</string>
<string name="More Freckles">More Freckles</string>
<string name="More Full">More Full</string>
<string name="More Gravity">More Gravity</string>
<string name="More Lipstick">More Lipstick</string>
<string name="More Love">More Love</string>
<string name="More Lower Lip">More Lower Lip</string>
<string name="More Muscles">More Muscles</string>
<string name="More Muscular">More Muscular</string>
<string name="More Rosy">More Rosy</string>
<string name="More Round">More Round</string>
<string name="More Saddle">More Saddle</string>
<string name="More Sloped">More Sloped</string>
<string name="More Square">More Square</string>
<string name="More Upper Lip">More Upper Lip</string>
<string name="More Vertical">More Vertical</string>
<string name="More Volume">More Volume</string>
<string name="More soul">More soul</string>
<string name="Moustache">Moustache</string>

<string name="Mouth Corner">Mouth Corner</string>
<string name="Mouth Position">Mouth Position</string>
<string name="Mowhawk">Mohawk</string>
<string name="Muscular">Muscular</string>
<string name="Mutton Chops">Mutton Chops</string>

<string name="Nail Polish">Nail Polish</string>
<string name="Nail Polish Color">Nail Polish Color</string>
<string name="Narrow">Narrow</string>
<string name="Narrow Back">Narrow Back</string>
<string name="Narrow Front">Narrow Front</string>
<string name="Narrow Lips">Narrow Lips</string>
<string name="Natural">Natural</string>
<string name="Neck Length">Neck Length</string>
<string name="Neck Thickness">Neck Thickness</string>
<string name="No Blush">No Blush</string>
<string name="No Eyeliner">No Eyeliner</string>
<string name="No Eyeshadow">No Eyeshadow</string>

<string name="No Lipgloss">No Lipgloss</string>
<string name="No Lipstick">No Lipstick</string>
<string name="No Part">No Part</string>
<string name="No Polish">No Polish</string>
<string name="No Red">No Red</string>
<string name="No Spikes">No Spikes</string>
<string name="No White">No White</string>
<string name="No Wrinkles">No Wrinkles</string>
<string name="Normal Lower">Normal Lower</string>
<string name="Normal Upper">Normal Upper</string>
<string name="Nose Left">Nose Left</string>
<string name="Nose Right">Nose Right</string>
<string name="Nose Size">Nose Size</string>
<string name="Nose Thickness">Nose Thickness</string>
<string name="Nose Tip Angle">Nose Tip Angle</string>
<string name="Nose Tip Shape">Nose Tip Shape</string>
<string name="Nose Width">Nose Width</string>
<string name="Nostril Division">Nostril Division</string>
<string name="Nostril Width">Nostril Width</string>


<string name="Opaque">Opaque</string>
<string name="Open">Open</string>
<string name="Open Back">Open Back</string>
<string name="Open Front">Open Front</string>
<string name="Open Left">Open Left</string>
<string name="Open Right">Open Right</string>
<string name="Orange">Orange</string>
<string name="Out">Out</string>
<string name="Out Shdw Color">Outer Shadow Color</string>
<string name="Out Shdw Opacity">Outer Shadow Opacity</string>
<string name="Outer Eye Corner">Outer Eye Corner</string>
<string name="Outer Eye Shadow">Outer Eye Shadow</string>
<string name="Outer Shadow">Outer Shadow</string>
<string name="Overbite">Overbite</string>

<string name="Package">Package</string>
<string name="Painted Nails">Painted Nails</string>
<string name="Pale">Pale</string>
<string name="Pants Crotch">Pants Crotch</string>
<string name="Pants Fit">Pants Fit</string>
<string name="Pants Length">Pants Length</string>


<string name="Pants Waist">Pants Waist</string>
<string name="Pants Wrinkles">Pants Wrinkles</string>
<string name="Part">Part</string>
<string name="Part Bangs">Part Bangs</string>
<string name="Pectorals">Pectorals</string>
<string name="Pigment">Pigment</string>
<string name="Pigtails">Pigtails</string>
<string name="Pink">Pink</string>
<string name="Pinker">Pinker</string>
<string name="Platform Height">Platform Height</string>
<string name="Platform Width">Platform Width</string>
<string name="Pointy">Pointy</string>
<string name="Pointy Heels">Pointy Heels</string>

<string name="Ponytail">Ponytail</string>
<string name="Poofy Skirt">Poofy Skirt</string>
<string name="Pop Left Eye">Pop Left Eye</string>
<string name="Pop Right Eye">Pop Right Eye</string>
<string name="Puffy">Puffy</string>
<string name="Puffy Eyelids">Puffy Eyelids</string>
<string name="Rainbow Color">Rainbow Color</string>
<string name="Red Hair">Red Hair</string>

<string name="Regular">Regular</string>

<string name="Right Part">Right Part</string>
<string name="Rosy Complexion">Rosy Complexion</string>
<string name="Round">Round</string>

<string name="Ruddiness">Ruddiness</string>
<string name="Ruddy">Ruddy</string>
<string name="Rumpled Hair">Rumpled Hair</string>
<string name="Saddle Bags">Saddle Bags</string>


<string name="Scrawny Leg">Scrawny Leg</string>
<string name="Separate">Separate</string>


<string name="Shallow">Shallow</string>
<string name="Shear Back">Shear Back</string>
<string name="Shear Face">Shear Face</string>
<string name="Shear Front">Shear Front</string>

<string name="Shear Left Up">Shear Left Up</string>

<string name="Shear Right Up">Shear Right Up</string>
<string name="Sheared Back">Sheared Back</string>
<string name="Sheared Front">Sheared Front</string>
<string name="Shift Left">Shift Left</string>
<string name="Shift Mouth">Shift Mouth</string>
<string name="Shift Right">Shift Right</string>
<string name="Shirt Bottom">Shirt Bottom</string>

<string name="Shirt Fit">Shirt Fit</string>

<string name="Shirt Wrinkles">Shirt Wrinkles</string>
<string name="Shoe Height">Shoe Height</string>

<string name="Short">Short</string>
<string name="Short Arms">Short Arms</string>
<string name="Short Legs">Short Legs</string>
<string name="Short Neck">Short Neck</string>
<string name="Short Pigtails">Short Pigtails</string>
<string name="Short Ponytail">Short Ponytail</string>
<string name="Short Sideburns">Short Sideburns</string>
<string name="Short Torso">Short Torso</string>
<string name="Short hips">Short hips</string>
<string name="Shoulders">Shoulders</string>

<string name="Side Fringe">Side Fringe</string>
<string name="Sideburns">Sideburns</string>

<string name="Sides Hair">Sides Hair</string>
<string name="Sides Hair Down">Sides Hair Down</string>
<string name="Sides Hair Up">Sides Hair Up</string>

<string name="Skinny Neck">Skinny Neck</string>
<string name="Skirt Fit">Skirt Fit</string>
<string name="Skirt Length">Skirt Length</string>
<string name="Slanted Forehead">Slanted Forehead</string>
<string name="Sleeve Length">Sleeve Length</string>



<string name="Sleeve Looseness">Sleeve Looseness</string>
<string name="Slit Back">Slit: Back</string>
<string name="Slit Front">Slit: Front</string>
<string name="Slit Left">Slit: Left</string>
<string name="Slit Right">Slit: Right</string>
<string name="Small">Small</string>
<string name="Small Hands">Small Hands</string>
<string name="Small Head">Small Head</string>
<string name="Smooth">Smooth</string>
<string name="Smooth Hair">Smooth Hair</string>
<string name="Socks Length">Socks Length</string>


<string name="Soulpatch">Soulpatch</string>

<string name="Sparse">Sparse</string>
<string name="Spiked Hair">Spiked Hair</string>
<string name="Square">Square</string>
<string name="Square Toe">Square Toe</string>
<string name="Squash Head">Squash Head</string>

<string name="Stretch Head">Stretch Head</string>
<string name="Sunken">Sunken</string>
<string name="Sunken Chest">Sunken Chest</string>
<string name="Sunken Eyes">Sunken Eyes</string>
<string name="Sweep Back">Sweep Back</string>
<string name="Sweep Forward">Sweep Forward</string>

<string name="Tall">Tall</string>
<string name="Taper Back">Taper Back</string>
<string name="Taper Front">Taper Front</string>
<string name="Thick Heels">Thick Heels</string>
<string name="Thick Neck">Thick Neck</string>
<string name="Thick Toe">Thick Toe</string>

<string name="Thin">Thin</string>
<string name="Thin Eyebrows">Thin Eyebrows</string>
<string name="Thin Lips">Thin Lips</string>
<string name="Thin Nose">Thin Nose</string>
<string name="Tight Chin">Tight Chin</string>
<string name="Tight Cuffs">Tight Cuffs</string>
<string name="Tight Pants">Tight Pants</string>
<string name="Tight Shirt">Tight Shirt</string>
<string name="Tight Skirt">Tight Skirt</string>
<string name="Tight Sleeves">Tight Sleeves</string>

<string name="Toe Shape">Toe Shape</string>
<string name="Toe Thickness">Toe Thickness</string>
<string name="Torso Length">Torso Length</string>
<string name="Torso Muscles">Torso Muscles</string>
<string name="Torso Scrawny">Torso Scrawny</string>
<string name="Unattached">Unattached</string>
<string name="Uncreased">Uncreased</string>
<string name="Underbite">Underbite</string>
<string name="Unnatural">Unnatural</string>
<string name="Upper Bridge">Upper Bridge</string>
<string name="Upper Cheeks">Upper Cheeks</string>
<string name="Upper Chin Cleft">Upper Chin Cleft</string>

<string name="Upper Eyelid Fold">Upper Eyelid Fold</string>
<string name="Upturned">Upturned</string>
<string name="Very Red">Very Red</string>
<string name="Waist Height">Waist Height</string>


<string name="Well-Fed">Well-Fed</string>
<string name="White Hair">White Hair</string>
<string name="Wide">Wide</string>
<string name="Wide Back">Wide Back</string>
<string name="Wide Front">Wide Front</string>
<string name="Wide Lips">Wide Lips</string>
<string name="Wild">Wild</string>
<string name="Wrinkles">Wrinkles</string>

	<!-- IM system messages -->
	<string name="IM_announce_incoming">has begun an IM session with you.</string>
	<string name="IM_autoresponded_to">Autoresponse sent to</string>
	<string name="IM_autoresponse_sent_item">was sent auto-response item</string>
	<string name="Unnamed">(Unnamed)</string>
	<string name="Saved_message">(Saved [LONG_TIMESTAMP]) </string>
	<string name="PowerUser1">You are bestowed with powers beyond mortal comprehension.</string>
	<string name="PowerUser2">Use your newfound abilities wisely.</string>
	<string name="Unlocked:">Unlocked:</string>
	<string name="PowerUser3">- Animation Priority up to 7 - Meant for animations that should override anything and everything at all times. DO NOT USE THIS FOR GENERAL ANIMATIONS.</string>
	<string name="RightClick">Right click</string>
	<string name="PowerUser4">Destroy objects - Permanently deletes an object immediately, when you don't feel like waiting for the server to respond.</string>
	<string name="PowerUser5">Explode objects - Turns an object physical, temporary, and delinks it.</string>

  <string name="group_role_everyone">Everyone</string>
  <string name="group_role_officers">Officers</string>
  <string name="group_role_owners">Owners</string>
  <string name="group_member_status_online">Online</string>


  <string name="DefaultMimeType">none/none</string>
  <string name="Chat">Chat</string>


  <string name="group_role_everyone">Cualquiera</string>
  <string name="group_role_officers">Oficiales</string>
  <string name="group_role_owners">Propietarios</string>	
  <string name="group_member_status_online">Conectado</string>
  
  <string name="Chat">Chat</string>

  <string name="DefaultMimeType">ninguno/ninguno</string>

 <!-- External editor status codes -->
 <string name="ExternalEditorNotSet">Escoge un editor usando las configuraciones de Editor Externo.</string>
 <string name="ExternalEditorNotFound">No se puede hallar el editor externo que has especificado.
Intenta entrecomillando el camino al editor.
(P.ej. "/Camino al/editor" "%s")</string>
 <string name="ExternalEditorCommandParseError">Error parsing the external editor command.</string>
 <string name="ExternalEditorFailedToRun">External editor failed to run.</string>

<!-- Addition of OSSL commands for use in OpenSimulator based regions, including Aurora -->
  <string name="LSLTipText_osSetRegionWaterHeight">
osSetRegionWaterHeight(float height)
Adjusts water height on region.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osSetRegionSunSettings">
osSetRegionSunSettings(integer useEstateSun, integer sunFixed, float sunHour)
Changes the estate sun settings, then triggers a sun update
'sunFixed' TRUE to keep the sun stationary, FALSE to use global time
'sunHour' The sun hour that is desired, 0...24, 0 is sunrise.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osSetEstateSunSettings">
osSetEstateSunSettings(integer sunFixed, float sunHour)
sunFixed = TRUE or FALSE, sunHour = 00.00 to 24.00.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osGetCurrentSunHour">
float osGetCurrentSunHour()
Returns float value of current sun hour 0...24 0 is sunrise.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osSunGetParam">
*DEPRECATED* Use osGetSunParam instead.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osSunSetParam">
*DEPRECATED* Use osSetSunParam instead.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osWindActiveModelPluginName">
string osWindActiveModelPluginName()
Returns the current working wind module installed
These are SimpleRandomWind or ConfigurableWind.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osParcelJoin">
osParcelJoin(vector pos1, vector pos2))
Joins parcels @ X,Y coordinates.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osParcelSubdivide">
osParcelSubdivide(vector pos1, vector pos2))
Subdivides parcels @ X,Y coordinates.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osParcelSetDetails">
*DEPRECATED* Use osSetParcelDetails instead.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osWindParamSet">
*DEPRECATED* Use osSetWindParam instead.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osWindParamGet">
*DEPRECATED* Use osGetWindParam instead.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osList2Double">
double osList2Double(list src, integer index)
Returns double-precision value from src at index.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osSetDynamicTextureURL">
osSetDynamicTextureURL(key dynamicID, string contentType, string url, string extraParams, integer timer )
Renders a web texture on the prim containing the script, and returns the UUID of the newly created texture.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osSetDynamicTextureData">
osSetDynamicTextureData(key dynamicID, string contentType, string data, string extraParams, integer timer)
Writes text and vector graphics onto a prim face.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osSetDynamicTextureURLBlend">
osSetDynamicTextureURLBlend(key dynamicID, string contentType, string url, string extraParams, integer timer, integer alpha)
Allows for two dynamic textures to blend on the prim containing this script.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osSetDynamicTextureDataBlend">
osSetDynamicTextureDataBlend(key dynamicID, string contentType, string data, string extraParams, integer timer, integer alpha)
Allows for two dynamic textures to blend on the prim containing this script.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osSetDynamicTextureURLBlendFace">
osSetDynamicTextureURLBlendFace(key dynamicID, string contentType, string url, string extraParams, integer blend, integer disp, integer timer, integer alpha, integer face)
Loads a web texture on a prim.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osSetDynamicTextureDataBlendFace">
osSetDynamicTextureDataBlendFace(key dynamicID, string contentType, string data, string extraParams, integer blend, integer disp, integer timer, integer alpha, integer face)
(OpenSim only.)
  </string>
  <string name="LSLTipText_osTerrainGetHeight">
*DEPRECATED* Use osGetTerrainHeight instead.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osTerrainSetHeight">
*DEPRECATED* Use osSetTerrainHeight instead.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osTerrainFlush">
osTerrainFlush()
Updates terrain data. Call this after you are done using osTerrainSetHeight.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osRegionRestart">
integer osRegionRestart(float seconds)
Restart the current region in the specified number of seconds from now.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osRegionNotice">
osRegionNotice(string msg)
Broadcasts a notification message to all agents on the current region.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osConsoleCommand">
osConsoleCommand(string command)
Issues commands directly to the OpenSim server console.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osSetParcelMediaURL">
osSetParcelMediaURL(string url)
Sets parcel media URL.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osSetParcelSIPAddress">
osSetParcelSIPAddress(string SIPAddress)
Sets parcel SIP Address for Voice.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osSetPrimFloatOnWater">
osSetPrimFloatOnWater(integer floatYN)
Make physical prims float at the water level, TRUE or FALSE.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osTeleportAgent">
osTeleportAgent(key agent, integer regionX, integer regionY, vector position, vector lookat)
  or
osTeleportAgent(key agent, string regionName, vector position, vector lookat)
  or
osTeleportAgent(key agent, vector position, vector lookat)
Teleports the specified agent to a specified location in the region, the grid, or the hypergrid. See documentation for details.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osGetAgentIP">
string osGetAgentIP(key agent)
Returns the Avatars IP Address
Allows in-world tools be used to coordinate out of world network services that need access to client IP addresses.
Should *ONLY* be used by Region Server Owner.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osGetAgents">
list osGetAgents()
Returns a list of all avatars in the region in which the script is running.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osAvatarPlayAnimation">
osAvatarPlayAnimation(key UUID, string animation)
Triggers animations contained within the same prim as the script. Does not need the target avatar's permission.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osAvatarStopAnimation">
osAvatarStopAnimation(key UUID, string animation)
Stops specified animation on the specified avatar.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osMovePen">
osMovePen(string drawList, integer x, integer y)
Moves the pen's location to the coordinates specified by the x and y parameters, without drawing anything.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osDrawLine">
osDrawLine(string drawList, integer startX, integer startY, integer endX, integer endY)
osDrawLine(string drawList, integer endX, integer endY)
Draws a line on a dynamic texture.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osDrawText">
osDrawText(string drawList, string text)
Renders text on a dynamic texture.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osDrawEllipse">
osDrawEllipse(string drawList, integer width, integer height)
Draws an ellipse on a dynamic texture.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osDrawRectangle">
osDrawRectangle(string drawList, integer width, integer height)
Draws a rectangle on a dynamic texture.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osDrawFilledRectangle">
osDrawFilledRectangle(string drawList, integer width, integer height)
Draws a rectangle on a dynamic texture, and fills it with the current pen color.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osDrawPolygon">
string osDrawPolygon (string drawList, list x, list y)
Draws a polygon on a dynamic texture.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osDrawFilledPolygon">
string osDrawFilledPolygon (string drawList, list x, list y)
Draws a polygon on a dynamic texture, and fills it with the current pen color.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osSetFontSize">
osSetFontSize(string drawList, integer fontSize)
Sets the font size to be used in osDrawText.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osSetFontName">
osSetFontName(string drawList, string fontName)
Sets current font to be used by osDrawText.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osSetPenSize">
osSetPenSize(string drawList, integer penSize)
Sets the pen size (line thickness) that is to be used when drawing dynamic textures.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osSetPenCap">
osSetPenCap(string drawList, string direction, string type)
Apply a shape on the end of a line. This allows using arrow, diamond, round and flat caps.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osSetPenColour">
*DEPRECATED* Use osSetPenColor instead
(OpenSim only.)
  </string>
  <string name="LSLTipText_osDrawImage">
osDrawImage(string drawList, integer width, integer height, string imageUrl)
Retrieves an image specified by the imageUrl parameter and draws it at the specified height and width.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osGetDrawStringSize">
vector osGetDrawStringSize(string contentType, string text, string fontName, integer fontSize)
Returns a vector containing the horizontal and vertical dimensions in pixels of the specified text
(OpenSim only.)
  </string>
  <string name="LSLTipText_osSetStateEvents">
osSetStateEvents(integer events)
Used in the past as a workaround for a bug with Opensim, which has long since been fixed.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osGetScriptEngineName">
string osGetScriptEngineName()
Returns the name of the script engine which is currently enabled on the server.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osGetSimulatorVersion">
string osGetSimulatorVersion()
Returns OpenSim server version information as a string.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osParseJSON">
string osParseJSON(string JSON)
Returns a hashtable containing the structured JSON contents.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osMessageObject">
osMessageObject(key UUID, string message)
Sends a string to the object identified by UUID.
The receiving object requires a dataserver(key queryid, string data) in a contained script(s).
The queryid passed will be the id of the calling object.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osMakeNotecard">
osMakeNotecard(string notecardName, list contents)
Write a Notecard contained in Prim with contents of list.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osGetNotecardLine">
string osGetNotecardLine(string name, integer line)
Reads the requested notecard line and return its data as a string.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osGetNotecard">
string osGetNotecard(string name)
Reads the entire notecard and return its data as a string.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osGetNumberOfNotecardLines">
integer osGetNumberOfNotecardLines(string name)
Returns total number of lines in a notecard.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osAvatarName2Key">
key osAvatarName2Key(string firstname, string lastname)
Returns the avatar's UUID from their firstname, lastname.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osKey2Name">
string osKey2Name(key UUID)
Returns avatar name from their UUID key.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osGetGridNick">
string osGetGridNick()
Returns the grid's nickname.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osGetGridName">
string osGetGridName()
Returns the grid's name.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osGetGridLoginURI">
string osGetGridLoginURI()
Returns the grid's LoginURI.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osFormatString">
string osFormatString(string str, list strings)
Return the string with parameters substituted into it (format comes from .NET String.Format class)
Parameters are specified positionally.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osMatchString">
list osMatchString(string src, string pattern, integer start)
Return a list of matches for the pattern and its components inside the source string.
The pattern is a regular expression. Each match in the result is the string that matched and its position in the source.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osLoadedCreationDate">
string osLoadedCreationDate()
Returns Creation Date from meta data of OAR.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osLoadedCreationTime">
string osLoadedCreationTime()
Returns Creation Time from meta data of OAR.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osLoadedCreationID">
string osLoadedCreationID()
Returns creation ID from meta data of OAR. Can not be used to identify a machine.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osGetLinkPrimitiveParams">
list osGetLinkPrimitiveParams(integer linknumber, list rules)
Returns the primitive parameters for the linkset prims specified by linknumber. If using linkset constants (e.g. LINK_SET, LINK_ALL_CHILDREN, etc), the requested parameters of each relevant prim are concatenated to the end of the list. Otherwise, usage is identical to llGetPrimitiveParams().
(OpenSim only.)
  </string>
  <string name="LSLTipText_osNpcCreate">
key osNpcCreate(string firstname, string lastname, vector position, key UUID)
Creates an NPC (Non Player Character) clone named firstname lastname at position from an already existing avatar specified by UUID.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osNpcMoveTo">
osNpcMoveTo(key npc, vector position)
Moves an NPC to a location within the region.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osNpcSay">
osNpcSay(key npc, string message)
Makes an NPC say something.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osNpcRemove">
osNpcRemove(key npc)
Removes an NPC.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osGetMapTexture">
key osGetMapTexture()
Returns the map texture UUID.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osGetRegionMapTexture">
key osGetRegionMapTexture(string regionName)
Returns the map texture UUID for the regionName requested.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osGetRegionStats">
list osGetRegionStats()
Returns a list of float values representing a number of region statistics (21 of the values shown in the statistics bar of LL-based clients).
(OpenSim only.)
  </string>
  <string name="LSLTipText_osGetSimulatorMemory">
integer osGetSimulatorMemory()
Returns the current amount of RAM used by the current OpenSim instance.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osKickAvatar">
osKickAvatar(string FirstName, string LastName, string alert)
Kicks avatar from region with an alert message.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osSetSpeed">
osSetSpeed(key UUID, float SpeedModifier)
Multiplies the normal running, walking, and flying speed of the specified avatar.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osCauseDamage">
osCauseDamage(key UUID, float damage)
Causes damage to specified avatar.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osCauseHealing">
osCauseHealing(key UUID, float healing)
Causes healing to specified avatar.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osGetPrimitiveParams">
list osGetPrimitiveParams(key prim, list rules)
Gets the parameters of the primitive, specified by key.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osSetPrimitiveParams">
osSetPrimitiveParams(key prim, list rules)
Sets primitive Params.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osSetProjectionParams">
osSetProjectionParams(key prim. integer projection, key texture, float fov, float focus, float amb)
Set projection paramaters for light sources.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osUnixTimeToTimestamp">
string osUnixTimeToTimestamp(integer unixtime)
Converts unixtime to an llGetTimeStamp() formated string.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osSetPenColor">
osSetPenColor(string drawList, string color)
Sets the pen color that is to be used when drawing dynamic textures.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osGetSunParam">
float osGetSunParam(string param)
Returns current float values for param, where param = day_length, year_length, day_night_offset, update_interval.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osSetSunParam">
osSetSunParam(string param, float value)
Sets region's sun parameters, where param = day_length, year_length, day_night_offset, update_interval.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osSetParcelDetails">
osSetParcelDetails(vector pos, list rules)
Set parcel details.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osGetTerrainHeight">
float osGetTerrainHeight(integer x, integer y)
Returns current terrain height at the given coordinates.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osSetTerrainHeight">
osSetTerrainHeight(integer x, integer y, float val)
Sets terrain height at the given coordinates. Use osTerrainFlush() afterwards.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osGetAvatarList">
list osGetAvatarList()
Returns a strided list of the UUID, position, and name of each avatar in the region, except the owner.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osTeleportOwner">
osTeleportOwner(integer regionX, integer regionY, vector position, vector lookat)
  or
osTeleportOwner(string regionName, vector position, vector lookat)
  or
osTeleportOwner(vector position, vector lookat)
Teleports the owner of the object that holds the script to a specified location in the region, the grid, or the hypergrid. See documentation for details.
(OpenSim only.)
  </string>

  <!-- LightShare functions -->
  <string name="LSLTipText_cmSetWindlightScene">
integer cmSetWindlightScene(list rules)
Set the current WindLight scene. Estate managers and owners only.
(Reguires LightShare)
  </string>
  <string name="LSLTipText_cmSetWindlightSceneTargeted">
integer cmSetWindlightSceneTargeted(list rules, key target)
Set the current WindLight scene directed at a specific avatar. Estate managers and owners only.
(Reguires LightShare)
  </string>
  <string name="LSLTipText_cmGetWindlightScene">
list cmGetWindlightScene(list rules)
Get the current WindLight settings.
(Reguires LightShare)
  </string>
  <!-- LightShare functions - alternate versions -->
  <!-- don't ask me why they renamed 'em, but we need to include both versions - -  MC -->
  <string name="LSLTipText_lsSetWindlightScene">
integer lsSetWindlightScene(list rules)
Set the current WindLight scene. Estate managers and owners only.
(Reguires LightShare)
  </string>
  <string name="LSLTipText_lsSetWindlightSceneTargeted">
integer lsSetWindlightSceneTargeted(list rules, key target)
Set the current WindLight scene directed at a specific avatar. Estate managers and owners only.
(Reguires LightShare)
  </string>
  <string name="LSLTipText_lsGetWindlightScene">
list lsGetWindlightScene(list rules)
Get the current WindLight settings.
(Reguires LightShare)
  </string>

  <!-- New OSSL Functions as of 8-10-2011 -->
  <string name="LSLTipText_osNpcSaveAppearance">
key osNpcSaveAppearance(key npc, string notecardName)
Saves the NPC's appearance to a notecard.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osNpcLoadAppearance">
osNpcLoadAppearance(key npc, string notecardName)
Loads the NPC's appearance from a notecard with appearance data.
Notecards can also be loaded by UUID.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osNpcMoveToTarget">
osNpcMoveToTarget(key npc, vector position, integer options)
Moves the NPC to a target at a given vector, using options to walk or to fly there.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osOwnerSaveAppearance">
key osOwnerSaveAppearance(string notecardName)
Saves the owner's appearance to a notecard inside the prim that holds the script.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osNpcGetRot">
rotation osNpcGetRot(key npc)
Retrieves the rotation of an NPC
(OpenSim only.)
  </string>
  <string name="LSLTipText_osNpcSetRot">
osNpcSetRot(key npc, rotation rot)
Sets an NPC's rotation.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osAgentSaveAppearance">
key osOwnerSaveAppearance(key avatarId, string notecardName)
Saves an avatar's appearance to a notecard inside the prim that holds the script.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osNpcGetPos">
vector osNpcGetPos(key npc)
Retrieves the vector of an NPC's position within a region.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osNpcStopMoveToTarget">
osNpcStopMoveToTarget(key npc)
Makes an NPC stop moving to a target.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osGetWindParam">
float osGetWindParam(string plugin, string param)
Gets the value of param property for plugin module.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osSetWindParam">
osSetWindParam(string plugin, string param, float value)
Sets value of param property for plugin module.
(OpenSim only.)
  </string>
  <string name="Unnamed">(Unnamed)</string>
  <string name="LSLTipText_llGetMassMKS">
float llGetMassMKS()
Returns a float that is the mass (in
Kilograms) of the object that the
script is attached to.
  </string>
  <string name="LSLTipText_llGetMemoryLimit">
integer llGetMemoryLimit()
Get the maximum memory a script can use.
  </string>
  <string name="LSLTipText_llGetParcelMusicURL">
string llGetParcelMusicURL()
Returns a string containing the parcel streaming audio URL.
The object owner must also be the land owner.
  </string>
  <string name="LSLTipText_llGetPhysicsMaterial">
list llGetPhysicsMaterial()
Used to get the physical characteristics of an object.
Returns a list in the form [ float gravity_multiplier, float restitution, float friction, float density ]
  </string>
  <string name="LSLTipText_llManageEstateAccess">
integer llManageEstateAccess(integer action, key avatar)
Used to add or remove agents from the estate's agent access or ban lists or groups from the estate's group access list.
  </string>
  <string name="LSLTipText_llSetAngularVelocity">
llSetAngularVelocity(vector force, integer local)
Applies rotational velocity to object.
  </string>
  <string name="LSLTipText_llSetKeyframedMotion">
llSetKeyframedMotion(list keyframes, list options)
Specify a list of times, positions, and orientations to be followed by an object. The object will be  smoothly moved between keyframes by the simulator.
  </string>
  <string name="LSLTipText_llSetPhysicsMaterial">
llSetPhysicsMaterial(integer material, float gravity,
float restitution, float friction, float density)
Used for setting the physical characteristics of an object.
  </string>
  <string name="LSLTipText_llSetRegionPos">
integer llSetRegionPos(vector position)
Tries to move the entire object so that the root prim is within 0.1m of position
  </string>
  <string name="LSLTipText_llSetVelocity">
llSetVelocity(vector force, integer local)
Applies velocity to an object
  </string>
  <string name="LSLTipText_llTransferLindenDollars">
key llTransferLindenDollars(key destination, integer amount)
Transfer amount of L$ money from script owner to destination avatar.
  </string>

<!-- Pathfinder functions. Current state: alpha -->
  <string name="LSLTipText_llCreateCharacter">
llCreateCharacter(list options)
Creates a pathfinding entity, known as a "character" from the object containing the script.
  </string>
  <string name="LSLTipText_llDeleteCharacter">
llDeleteCharacter()
Convert the current linkset back to a standard object, removing all pathfinding properties.
  </string>
  <string name="LSLTipText_llEvade">
llEvade(key target, list options)
Characters will try to hide from their pursuers if there is a good hiding spot along their fleeing path.
  </string>
  <string name="LSLTipText_llExecCharacterCmd">
llExecCharacterCmd(integer command, list options)
Send a command to the pathing system.
  </string>
  <string name="LSLTipText_llGetClosestNavPoint">
list llGetClosestNavPoint(vector point, list options)
Finds the closest navpoint and returns a list with a single vector if succesful. Returns empty list when no navpoints found.
  </string>
  <string name="LSLTipText_llFleeFrom">
llFleeFrom(vector source, float distance, list options)
Tells an object to keep away from a defined position in the region or adjacent regions.
  </string>
  <string name="LSLTipText_llNavigateTo">
llNavigateTo(vector pos, list options)
Tells an object to travel to a defined position in the region or adjacent regions.
  </string>
  <string name="LSLTipText_llPatrolPoints">
llPatrolPoints(list patrolPoints, list options)
Sets the object patrolling between the points specified in patrolPoints.
  </string>
  <string name="LSLTipText_llPursue">
llPursue(key target, list options)
Causes the object to pursue a target.
  </string>
  <string name="LSLTipText_llUpdateCharacter">
llUpdateCharacter(list options)
Updates settings for a character.
  </string>
  <string name="LSLTipText_llWanderWithin">
llWanderWithin(vector origin, float dist, list options)
Sets a character to wander about a central spot within a specified radius.
  </string>
  <string name="LSLTipText_osIsNpc">
integer osIsNpc(key npc)
Returns TRUE if the given key is an NPC, false otherwise.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osNpcGetOwner">
key osNpcGetOwner(key npc)
Return the owner key of the given NPC. If the NPC is unowned or the input key does not belong to an NPC then it returns NULL_KEY.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osGetGridCustom">
string osGetGridCustom(string key)
Reads configuration strings from the [GridInfo] setion in OpenSim.ini.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osGetGridHomeURI">
string osGetGridHomeURI()
Returns the hypergrid URI of the grid where the user logged in.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osNpcPlayAnimation">
osNpcPlayAnimation(key npc, string animation)
Get an NPC to play an animation. The animation can either be a key or the name of an animation in the same object as the script.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osNpcSit">
osNpcSit(key npc, key target, integer options)
Sit an NPC on a prim target. No options have been implemented yet, so always input 0.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osNpcStand">
osNpcStand(key npc)
Make an NPC stand up.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osNpcStopAnimation">
osNpcStopAnimation(key npc, string animation)
Get an NPC to stop playing an animation. The animation can either be a key or the name of an animation in the same inventory as the script.
(OpenSim only.)
  </string>
  <string name="LSLTipText_osSetRot">
osSetRot(key target, quaternion rotation)
Rotates an object or avatar.
(OpenSim only.)
  </string>
</strings>
